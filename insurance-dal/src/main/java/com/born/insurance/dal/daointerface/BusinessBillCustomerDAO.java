/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.insurance.dal.daointerface;

// auto generated imports
import com.born.insurance.dal.dataobject.BusinessBillCustomerDO;
import org.springframework.dao.DataAccessException;
import java.util.List;

/**
 * A dao interface provides methods to access database table <tt>business_bill_customer</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/business_bill_customer.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */
 @SuppressWarnings("rawtypes") 
public interface BusinessBillCustomerDAO {
	/**
	 *  Insert one <tt>BusinessBillCustomerDO</tt> object to DB table <tt>business_bill_customer</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into business_bill_customer(bill_customer_id,customer_user_id,customer_user_name,customer_cert_type,customer_cert_no,relation,type,business_bill_id,bill_no) values (?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param businessBillCustomer
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(BusinessBillCustomerDO businessBillCustomer) throws DataAccessException;

	/**
	 *  Update DB table <tt>business_bill_customer</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update business_bill_customer set customer_user_id=?, customer_user_name=?, customer_cert_type=?, customer_cert_no=?, relation=?, type=?, business_bill_id=? where (bill_customer_id = ?)</tt>
	 *
	 *	@param businessBillCustomer
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(BusinessBillCustomerDO businessBillCustomer) throws DataAccessException;

	/**
	 *  Query DB table <tt>business_bill_customer</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select bill_customer_id, customer_user_id, customer_user_name, customer_cert_type, customer_cert_no, relation, type, business_bill_id, bill_no from business_bill_customer where (bill_customer_id = ?)</tt>
	 *
	 *	@param billCustomerId
	 *	@return BusinessBillCustomerDO
	 *	@throws DataAccessException
	 */	 
    public BusinessBillCustomerDO findById(long billCustomerId) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>business_bill_customer</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from business_bill_customer where (bill_customer_id = ?)</tt>
	 *
	 *	@param billCustomerId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long billCustomerId) throws DataAccessException;

	/**
	 *  Query DB table <tt>business_bill_customer</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select bill_customer_id, customer_user_id, customer_user_name, customer_cert_type, customer_cert_no, relation, type, business_bill_id from business_bill_customer where (1 = 1)</tt>
	 *
	 *	@param businessBillCustomer
	 *	@param sortCol
	 *	@param sortOrder
	 *	@param limitStart
	 *	@param pageSize
	 *	@return List<BusinessBillCustomerDO>
	 *	@throws DataAccessException
	 */	 
    public List<BusinessBillCustomerDO> findByCondition(BusinessBillCustomerDO businessBillCustomer, String sortCol, String sortOrder, long limitStart, long pageSize) throws DataAccessException;

	/**
	 *  Query DB table <tt>business_bill_customer</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from business_bill_customer where (1 = 1)</tt>
	 *
	 *	@param businessBillCustomer
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(BusinessBillCustomerDO businessBillCustomer) throws DataAccessException;

	/**
	 *  Query DB table <tt>business_bill_customer</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select bill_customer_id, customer_user_id, customer_user_name, customer_cert_type, customer_cert_no, relation, type, business_bill_id, bill_no from business_bill_customer where (bill_no = ?)</tt>
	 *
	 *	@param billNo
	 *	@return List<BusinessBillCustomerDO>
	 *	@throws DataAccessException
	 */	 
    public List<BusinessBillCustomerDO> findBusinessBillCustomers(String billNo) throws DataAccessException;

	/**
	 *  Query DB table <tt>business_bill_customer</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select bill_customer_id, customer_user_id, customer_user_name, customer_cert_type, customer_cert_no, relation, type, business_bill_id, bill_no from business_bill_customer where ((business_bill_id = ?) AND (type = ?))</tt>
	 *
	 *	@param businessBillId
	 *	@param type
	 *	@return BusinessBillCustomerDO
	 *	@throws DataAccessException
	 */	 
    public BusinessBillCustomerDO findBillCustomerInfo(long businessBillId, String type) throws DataAccessException;

}
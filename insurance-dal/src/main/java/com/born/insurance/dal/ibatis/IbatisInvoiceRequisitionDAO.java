/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.insurance.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.born.insurance.dal.daointerface.InvoiceRequisitionDAO;


// auto generated imports
import com.born.insurance.dal.dataobject.InvoiceRequisitionDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.born.insurance.dal.daointerface.InvoiceRequisitionDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/invoice_requisition.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisInvoiceRequisitionDAO extends SqlMapClientDaoSupport implements InvoiceRequisitionDAO {
	/**
	 *  Insert one <tt>InvoiceRequisitionDO</tt> object to DB table <tt>invoice_requisition</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into invoice_requisition(invoice_requisition_id,insurance_no,insurance_company_id,insurance_company_name,identify_number,org_address,open_bank_name,mobile,bank_card_no,capital_amount,small_amount,apply_no,settlement_no,apply_time,apply_user_id,apply_user_name,apply_deptment,department_charger,leader,remark) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param invoiceRequisition
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(InvoiceRequisitionDO invoiceRequisition) throws DataAccessException {
    	if (invoiceRequisition == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-INVOICE-REQUISITION-INSERT", invoiceRequisition);

        return invoiceRequisition.getInvoiceRequisitionId();
    }

	/**
	 *  Update DB table <tt>invoice_requisition</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update invoice_requisition set insurance_no=?, insurance_company_id=?, insurance_company_name=?, identify_number=?, org_address=?, open_bank_name=?, mobile=?, bank_card_no=?, capital_amount=?, small_amount=?, apply_no=?, settlement_no=?, apply_time=?, apply_user_id=?, apply_user_name=?, apply_deptment=?, department_charger=?, leader=?, remark=? where (invoice_requisition_id = ?)</tt>
	 *
	 *	@param invoiceRequisition
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(InvoiceRequisitionDO invoiceRequisition) throws DataAccessException {
    	if (invoiceRequisition == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-INVOICE-REQUISITION-UPDATE", invoiceRequisition);
    }

	/**
	 *  Query DB table <tt>invoice_requisition</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select invoice_requisition_id, insurance_no, insurance_company_id, insurance_company_name, identify_number, org_address, open_bank_name, mobile, bank_card_no, capital_amount, small_amount, apply_no, settlement_no, apply_time, apply_user_id, apply_user_name, apply_deptment, department_charger, leader, remark from invoice_requisition where (invoice_requisition_id = ?)</tt>
	 *
	 *	@param invoiceRequisitionId
	 *	@return InvoiceRequisitionDO
	 *	@throws DataAccessException
	 */	 
    public InvoiceRequisitionDO findById(long invoiceRequisitionId) throws DataAccessException {
        Long param = new Long(invoiceRequisitionId);

        return (InvoiceRequisitionDO) getSqlMapClientTemplate().queryForObject("MS-INVOICE-REQUISITION-FIND-BY-ID", param);

    }

	/**
	 *  Delete records from DB table <tt>invoice_requisition</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from invoice_requisition where (invoice_requisition_id = ?)</tt>
	 *
	 *	@param invoiceRequisitionId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long invoiceRequisitionId) throws DataAccessException {
        Long param = new Long(invoiceRequisitionId);

        return getSqlMapClientTemplate().delete("MS-INVOICE-REQUISITION-DELETE-BY-ID", param);
    }

	/**
	 *  Query DB table <tt>invoice_requisition</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select invoice_requisition_id, insurance_no, insurance_company_id, insurance_company_name, identify_number, org_address, open_bank_name, mobile, bank_card_no, capital_amount, small_amount, apply_no, settlement_no, apply_time, apply_user_id, apply_user_name, apply_deptment, department_charger, leader, remark from invoice_requisition where (1 = 1)</tt>
	 *
	 *	@param invoiceRequisition
	 *	@param sortCol
	 *	@param sortOrder
	 *	@param limitStart
	 *	@param pageSize
	 *	@return List<InvoiceRequisitionDO>
	 *	@throws DataAccessException
	 */	 
    public List<InvoiceRequisitionDO> findByCondition(InvoiceRequisitionDO invoiceRequisition, String sortCol, String sortOrder, long limitStart, long pageSize) throws DataAccessException {
    	if (invoiceRequisition == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("invoiceRequisition", invoiceRequisition);
        param.put("sortCol", sortCol);
        param.put("sortOrder", sortOrder);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));

        return getSqlMapClientTemplate().queryForList("MS-INVOICE-REQUISITION-FIND-BY-CONDITION", param);

    }

	/**
	 *  Query DB table <tt>invoice_requisition</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from invoice_requisition where (1 = 1)</tt>
	 *
	 *	@param invoiceRequisition
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(InvoiceRequisitionDO invoiceRequisition) throws DataAccessException {
    	if (invoiceRequisition == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}


	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-INVOICE-REQUISITION-FIND-BY-CONDITION-COUNT", invoiceRequisition);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Query DB table <tt>invoice_requisition</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select invoice_requisition_id, insurance_no, insurance_company_id, insurance_company_name, identify_number, org_address, open_bank_name, mobile, bank_card_no, capital_amount, small_amount, apply_no, settlement_no, apply_time, apply_user_id, apply_user_name, apply_deptment, department_charger, leader, remark from invoice_requisition where (1 = 1)</tt>
	 *
	 *	@param billNo
	 *	@return InvoiceRequisitionDO
	 *	@throws DataAccessException
	 */	 
    public InvoiceRequisitionDO getInvoiceRequisitionInfo(String billNo) throws DataAccessException {

        return (InvoiceRequisitionDO) getSqlMapClientTemplate().queryForObject("MS-INVOICE-REQUISITION-GET-INVOICE-REQUISITION-INFO", billNo);

    }

}
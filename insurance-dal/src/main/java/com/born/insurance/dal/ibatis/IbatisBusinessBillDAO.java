/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.insurance.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.born.insurance.dal.daointerface.BusinessBillDAO;


// auto generated imports
import com.born.insurance.dal.dataobject.BusinessBillDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.born.insurance.dal.daointerface.BusinessBillDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/business_bill.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisBusinessBillDAO extends SqlMapClientDaoSupport implements BusinessBillDAO {
	/**
	 *  Insert one <tt>BusinessBillDO</tt> object to DB table <tt>business_bill</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into business_bill(business_bill_id,letter_id,form_id,insurance_of_type,bill_no,price_no,renewal_no,batch_no,plate_number,periods,insurance_depart,insurance_team,insurance_broker_no,insurance_broker_name,insurance_no,invoice_no,bill_customer_id,bill_customer_name,bill_insured_id,bill_insured_name,insurance_type_id,insurance_type_name,insurance_catalog_id,insurance_catalog_name,insurance_amount,premium_amount,insuranceDate,beginDate,endDate,business_user_id,business_user_name,insurance_company_id,insurance_company_name,agency_company_id,agency_company_name,remark,sorce_business_bill_id,bill_status,status,version,creator_id,creator_name,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param businessBill
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(BusinessBillDO businessBill) throws DataAccessException {
    	if (businessBill == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-BUSINESS-BILL-INSERT", businessBill);

        return businessBill.getBusinessBillId();
    }

	/**
	 *  Update DB table <tt>business_bill</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update business_bill set letter_id=?, form_id=?, insurance_of_type=?, bill_no=?, price_no=?, renewal_no=?, batch_no=?, plate_number=?, periods=?, insurance_depart=?, insurance_team=?, insurance_broker_no=?, insurance_broker_name=?, insurance_no=?, invoice_no=?, bill_customer_id=?, bill_customer_name=?, bill_insured_id=?, bill_insured_name=?, insurance_type_id=?, insurance_type_name=?, insurance_catalog_id=?, insurance_catalog_name=?, insurance_amount=?, premium_amount=?, insuranceDate=?, beginDate=?, endDate=?, business_user_id=?, business_user_name=?, insurance_company_id=?, insurance_company_name=?, agency_company_id=?, agency_company_name=?, broker_scale=?, common_scale=?, gross_rate=?, gross_profit=?, broker_val=?, common_val=?, remark=?, sorce_business_bill_id=?, bill_status=?, status=?, version=?, creator_id=?, creator_name=? where (business_bill_id = ?)</tt>
	 *
	 *	@param businessBill
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(BusinessBillDO businessBill) throws DataAccessException {
    	if (businessBill == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-BUSINESS-BILL-UPDATE", businessBill);
    }

	/**
	 *  Query DB table <tt>business_bill</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select business_bill_id, letter_id, form_id, insurance_of_type, bill_no, price_no, renewal_no, batch_no, plate_number, periods, insurance_depart, insurance_team, insurance_broker_no, insurance_broker_name, insurance_no, invoice_no, bill_customer_id, bill_customer_name, bill_insured_id, bill_insured_name, insurance_type_id, insurance_type_name, insurance_catalog_id, insurance_catalog_name, insurance_amount, premium_amount, insuranceDate, beginDate, endDate, business_user_id, business_user_name, insurance_company_id, insurance_company_name, agency_company_id, agency_company_name, broker_scale, common_scale, gross_rate, gross_profit, broker_val, common_val, remark, sorce_business_bill_id, bill_status, status, version, creator_id, creator_name, raw_add_time, raw_update_time from business_bill where (business_bill_id = ?)</tt>
	 *
	 *	@param businessBillId
	 *	@return BusinessBillDO
	 *	@throws DataAccessException
	 */	 
    public BusinessBillDO findById(long businessBillId) throws DataAccessException {
        Long param = new Long(businessBillId);

        return (BusinessBillDO) getSqlMapClientTemplate().queryForObject("MS-BUSINESS-BILL-FIND-BY-ID", param);

    }

	/**
	 *  Query DB table <tt>business_bill</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select business_bill_id, letter_id, form_id, insurance_of_type, bill_no, price_no, renewal_no, batch_no, plate_number, periods, insurance_depart, insurance_team, insurance_broker_no, insurance_broker_name, insurance_no, invoice_no, bill_customer_id, bill_customer_name, bill_insured_id, bill_insured_name, insurance_type_id, insurance_type_name, insurance_catalog_id, insurance_catalog_name, insurance_amount, premium_amount, insuranceDate, beginDate, endDate, business_user_id, business_user_name, insurance_company_id, insurance_company_name, agency_company_id, agency_company_name, broker_scale, common_scale, gross_rate, gross_profit, broker_val, common_val, remark, sorce_business_bill_id, bill_status, status, version, creator_id, creator_name, raw_add_time, raw_update_time from business_bill where (form_id = ?)</tt>
	 *
	 *	@param formId
	 *	@return BusinessBillDO
	 *	@throws DataAccessException
	 */	 
    public BusinessBillDO findByFormId(long formId) throws DataAccessException {
        Long param = new Long(formId);

        return (BusinessBillDO) getSqlMapClientTemplate().queryForObject("MS-BUSINESS-BILL-FIND-BY-FORM-ID", param);

    }

	/**
	 *  Delete records from DB table <tt>business_bill</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from business_bill where (business_bill_id = ?)</tt>
	 *
	 *	@param businessBillId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long businessBillId) throws DataAccessException {
        Long param = new Long(businessBillId);

        return getSqlMapClientTemplate().delete("MS-BUSINESS-BILL-DELETE-BY-ID", param);
    }

	/**
	 *  Query DB table <tt>business_bill</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select business_bill_id, letter_id, form_id, insurance_of_type, bill_no, price_no, renewal_no, batch_no, plate_number, periods, insurance_depart, insurance_team, insurance_broker_no, insurance_broker_name, insurance_no, invoice_no, bill_customer_id, bill_customer_name, bill_insured_id, bill_insured_name, insurance_type_id, insurance_type_name, insurance_catalog_id, insurance_catalog_name, insurance_amount, premium_amount, insuranceDate, beginDate, endDate, business_user_id, business_user_name, insurance_company_id, insurance_company_name, agency_company_id, agency_company_name, broker_scale, common_scale, gross_rate, gross_profit, broker_val, common_val, remark, sorce_business_bill_id, bill_status, status, version, creator_id, creator_name, raw_add_time, raw_update_time from business_bill where (1 = 1)</tt>
	 *
	 *	@param businessBill
	 *	@param sortCol
	 *	@param sortOrder
	 *	@param limitStart
	 *	@param pageSize
	 *	@return List<BusinessBillDO>
	 *	@throws DataAccessException
	 */	 
    public List<BusinessBillDO> findByCondition(BusinessBillDO businessBill, String sortCol, String sortOrder, long limitStart, long pageSize) throws DataAccessException {
    	if (businessBill == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("businessBill", businessBill);
        param.put("sortCol", sortCol);
        param.put("sortOrder", sortOrder);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));

        return getSqlMapClientTemplate().queryForList("MS-BUSINESS-BILL-FIND-BY-CONDITION", param);

    }

	/**
	 *  Query DB table <tt>business_bill</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from business_bill where (1 = 1)</tt>
	 *
	 *	@param businessBill
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(BusinessBillDO businessBill) throws DataAccessException {
    	if (businessBill == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}


	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-BUSINESS-BILL-FIND-BY-CONDITION-COUNT", businessBill);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

}
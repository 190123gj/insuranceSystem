/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.insurance.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.born.insurance.dal.daointerface.InsuranceProductDAO;


// auto generated imports
import com.born.insurance.dal.dataobject.InsuranceProductDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Date;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.born.insurance.dal.daointerface.InsuranceProductDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/insurance_product.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisInsuranceProductDAO extends SqlMapClientDaoSupport implements InsuranceProductDAO {
	/**
	 *  Insert one <tt>InsuranceProductDO</tt> object to DB table <tt>insurance_product</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into insurance_product(product_id,product_name,product_no,company_user_id,company_base_user_id,company_user_name,record_number,catalog_id,catalog_name,sale_status,stop_sale_date,pay_type,pay_type_name,pay_period,pay_period_name,rate_id,parent_product_id,choice,remark,is_quota,is_life_insurance,abbr1,abbr2,abbr3,insurance_period_type,insurance_period,creator_id,creator_name,unit_price,period_rate,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param insuranceProduct
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(InsuranceProductDO insuranceProduct) throws DataAccessException {
    	if (insuranceProduct == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-INSURANCE-PRODUCT-INSERT", insuranceProduct);

        return insuranceProduct.getProductId();
    }

	/**
	 *  Update DB table <tt>insurance_product</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update insurance_product set product_name=?, product_no=?, company_user_id=?, company_base_user_id=?, company_user_name=?, record_number=?, catalog_id=?, catalog_name=?, sale_status=?, stop_sale_date=?, pay_type=?, pay_type_name=?, pay_period=?, pay_period_name=?, rate_id=?, parent_product_id=?, choice=?, remark=?, is_quota=?, is_life_insurance=?, abbr1=?, abbr2=?, abbr3=?, insurance_period_type=?, insurance_period=?, creator_id=?, creator_name=?, unit_price=?, period_rate=? where (product_id = ?)</tt>
	 *
	 *	@param insuranceProduct
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(InsuranceProductDO insuranceProduct) throws DataAccessException {
    	if (insuranceProduct == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-INSURANCE-PRODUCT-UPDATE", insuranceProduct);
    }

	/**
	 *  Query DB table <tt>insurance_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select product_id, product_name, product_no, company_user_id, company_base_user_id, company_user_name, record_number, catalog_id, catalog_name, sale_status, stop_sale_date, pay_type, pay_type_name, pay_period, pay_period_name, rate_id, parent_product_id, choice, remark, is_quota, is_life_insurance, abbr1, abbr2, abbr3, insurance_period_type, insurance_period, creator_id, creator_name, unit_price, period_rate, raw_add_time, raw_update_time from insurance_product where (product_id = ?)</tt>
	 *
	 *	@param productId
	 *	@return InsuranceProductDO
	 *	@throws DataAccessException
	 */	 
    public InsuranceProductDO findById(long productId) throws DataAccessException {
        Long param = new Long(productId);

        return (InsuranceProductDO) getSqlMapClientTemplate().queryForObject("MS-INSURANCE-PRODUCT-FIND-BY-ID", param);

    }

	/**
	 *  Delete records from DB table <tt>insurance_product</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from insurance_product where (product_id = ?)</tt>
	 *
	 *	@param productId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long productId) throws DataAccessException {
        Long param = new Long(productId);

        return getSqlMapClientTemplate().delete("MS-INSURANCE-PRODUCT-DELETE-BY-ID", param);
    }

	/**
	 *  Query DB table <tt>insurance_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from insurance_product where (1 = 1)</tt>
	 *
	 *	@param insuranceProduct
	 *	@param sortCol
	 *	@param sortOrder
	 *	@param priceProducts
	 *	@param productIds
	 *	@param projectSetUpCatalogIds
	 *	@param limitStart
	 *	@param pageSize
	 *	@return List<InsuranceProductDO>
	 *	@throws DataAccessException
	 */	 
    public List<InsuranceProductDO> findByCondition(InsuranceProductDO insuranceProduct, String sortCol, String sortOrder, String priceProducts, String productIds, String projectSetUpCatalogIds, long limitStart, long pageSize) throws DataAccessException {
    	if (insuranceProduct == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("insuranceProduct", insuranceProduct);
        param.put("sortCol", sortCol);
        param.put("sortOrder", sortOrder);
        param.put("priceProducts", priceProducts);
        param.put("productIds", productIds);
        param.put("projectSetUpCatalogIds", projectSetUpCatalogIds);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));

        return getSqlMapClientTemplate().queryForList("MS-INSURANCE-PRODUCT-FIND-BY-CONDITION", param);

    }

	/**
	 *  Query DB table <tt>insurance_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from insurance_product where (1 = 1)</tt>
	 *
	 *	@param insuranceProduct
	 *	@param priceProducts
	 *	@param productIds
	 *	@param projectSetUpCatalogIds
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(InsuranceProductDO insuranceProduct, String priceProducts, String productIds, String projectSetUpCatalogIds) throws DataAccessException {
    	if (insuranceProduct == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("insuranceProduct", insuranceProduct);
        param.put("priceProducts", priceProducts);
        param.put("productIds", productIds);
        param.put("projectSetUpCatalogIds", projectSetUpCatalogIds);

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-INSURANCE-PRODUCT-FIND-BY-CONDITION-COUNT", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Query DB table <tt>insurance_product</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from insurance_product where (1 = 1)</tt>
	 *
	 *	@param dtDate
	 *	@return List<InsuranceProductDO>
	 *	@throws DataAccessException
	 */	 
    public List<InsuranceProductDO> findOutTimeProduct(Date dtDate) throws DataAccessException {

        return getSqlMapClientTemplate().queryForList("MS-INSURANCE-PRODUCT-FIND-OUT-TIME-PRODUCT", dtDate);

    }

	/**
	 *  Update DB table <tt>insurance_product</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update insurance_product set sale_status=1 where (1 = 1)</tt>
	 *
	 *	@param productsId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateOutTimeProduct(String productsId) throws DataAccessException {

        return getSqlMapClientTemplate().update("MS-INSURANCE-PRODUCT-UPDATE-OUT-TIME-PRODUCT", productsId);
    }

}
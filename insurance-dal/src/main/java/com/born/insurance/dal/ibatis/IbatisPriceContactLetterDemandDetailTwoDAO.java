/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.insurance.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.born.insurance.dal.daointerface.PriceContactLetterDemandDetailTwoDAO;


// auto generated imports
import com.born.insurance.dal.dataobject.PriceContactLetterDemandDetailTwoDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.born.insurance.dal.daointerface.PriceContactLetterDemandDetailTwoDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/price_contact_letter_demand_detail_two.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisPriceContactLetterDemandDetailTwoDAO extends SqlMapClientDaoSupport implements PriceContactLetterDemandDetailTwoDAO {
	/**
	 *  Insert one <tt>PriceContactLetterDemandDetailTwoDO</tt> object to DB table <tt>price_contact_letter_demand_detail_two</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into price_contact_letter_demand_detail_two(id,letter_demand_id,license_plate_number,driving_license_owner,frame_number,brand_model,initial_registration_date,dangerous_goods_name,output_volume,engine_number,vehicle_type,ship_name,navigation_area,parking,construction_date,single_voyage,ship_type,gross_tonnage,alteration_date,version,ext) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param priceContactLetterDemandDetailTwo
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(PriceContactLetterDemandDetailTwoDO priceContactLetterDemandDetailTwo) throws DataAccessException {
    	if (priceContactLetterDemandDetailTwo == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-PRICE-CONTACT-LETTER-DEMAND-DETAIL-TWO-INSERT", priceContactLetterDemandDetailTwo);

        return priceContactLetterDemandDetailTwo.getId();
    }

	/**
	 *  Update DB table <tt>price_contact_letter_demand_detail_two</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update price_contact_letter_demand_detail_two set letter_demand_id=?, license_plate_number=?, driving_license_owner=?, frame_number=?, brand_model=?, initial_registration_date=?, dangerous_goods_name=?, output_volume=?, engine_number=?, vehicle_type=?, ship_name=?, navigation_area=?, parking=?, construction_date=?, single_voyage=?, ship_type=?, gross_tonnage=?, alteration_date=?, version=?, ext=? where (id = ?)</tt>
	 *
	 *	@param priceContactLetterDemandDetailTwo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(PriceContactLetterDemandDetailTwoDO priceContactLetterDemandDetailTwo) throws DataAccessException {
    	if (priceContactLetterDemandDetailTwo == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-PRICE-CONTACT-LETTER-DEMAND-DETAIL-TWO-UPDATE", priceContactLetterDemandDetailTwo);
    }

	/**
	 *  Query DB table <tt>price_contact_letter_demand_detail_two</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, letter_demand_id, license_plate_number, driving_license_owner, frame_number, brand_model, initial_registration_date, dangerous_goods_name, output_volume, engine_number, vehicle_type, ship_name, navigation_area, parking, construction_date, single_voyage, ship_type, gross_tonnage, alteration_date, version, ext from price_contact_letter_demand_detail_two where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return PriceContactLetterDemandDetailTwoDO
	 *	@throws DataAccessException
	 */	 
    public PriceContactLetterDemandDetailTwoDO findById(long id) throws DataAccessException {
        Long param = new Long(id);

        return (PriceContactLetterDemandDetailTwoDO) getSqlMapClientTemplate().queryForObject("MS-PRICE-CONTACT-LETTER-DEMAND-DETAIL-TWO-FIND-BY-ID", param);

    }

	/**
	 *  Delete records from DB table <tt>price_contact_letter_demand_detail_two</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from price_contact_letter_demand_detail_two where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long id) throws DataAccessException {
        Long param = new Long(id);

        return getSqlMapClientTemplate().delete("MS-PRICE-CONTACT-LETTER-DEMAND-DETAIL-TWO-DELETE-BY-ID", param);
    }

	/**
	 *  Delete records from DB table <tt>price_contact_letter_demand_detail_two</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from price_contact_letter_demand_detail_two where (letter_demand_id = ?)</tt>
	 *
	 *	@param letterDemandId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByLetterDemandId(long letterDemandId) throws DataAccessException {
        Long param = new Long(letterDemandId);

        return getSqlMapClientTemplate().delete("MS-PRICE-CONTACT-LETTER-DEMAND-DETAIL-TWO-DELETE-BY-LETTER-DEMAND-ID", param);
    }

	/**
	 *  Query DB table <tt>price_contact_letter_demand_detail_two</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, letter_demand_id, license_plate_number, driving_license_owner, frame_number, brand_model, initial_registration_date, dangerous_goods_name, output_volume, engine_number, vehicle_type, ship_name, navigation_area, parking, construction_date, single_voyage, ship_type, gross_tonnage, alteration_date, version, ext from price_contact_letter_demand_detail_two where (1 = 1)</tt>
	 *
	 *	@param priceContactLetterDemandDetailTwo
	 *	@param sortCol
	 *	@param sortOrder
	 *	@param limitStart
	 *	@param pageSize
	 *	@return List<PriceContactLetterDemandDetailTwoDO>
	 *	@throws DataAccessException
	 */	 
    public List<PriceContactLetterDemandDetailTwoDO> findByCondition(PriceContactLetterDemandDetailTwoDO priceContactLetterDemandDetailTwo, String sortCol, String sortOrder, long limitStart, long pageSize) throws DataAccessException {
    	if (priceContactLetterDemandDetailTwo == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("priceContactLetterDemandDetailTwo", priceContactLetterDemandDetailTwo);
        param.put("sortCol", sortCol);
        param.put("sortOrder", sortOrder);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));

        return getSqlMapClientTemplate().queryForList("MS-PRICE-CONTACT-LETTER-DEMAND-DETAIL-TWO-FIND-BY-CONDITION", param);

    }

	/**
	 *  Query DB table <tt>price_contact_letter_demand_detail_two</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from price_contact_letter_demand_detail_two where (1 = 1)</tt>
	 *
	 *	@param priceContactLetterDemandDetailTwo
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(PriceContactLetterDemandDetailTwoDO priceContactLetterDemandDetailTwo) throws DataAccessException {
    	if (priceContactLetterDemandDetailTwo == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}


	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-PRICE-CONTACT-LETTER-DEMAND-DETAIL-TWO-FIND-BY-CONDITION-COUNT", priceContactLetterDemandDetailTwo);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

}
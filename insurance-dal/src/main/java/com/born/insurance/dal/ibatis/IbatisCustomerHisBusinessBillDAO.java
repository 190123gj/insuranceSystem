/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.insurance.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.born.insurance.dal.daointerface.CustomerHisBusinessBillDAO;


// auto generated imports
import com.born.insurance.dal.dataobject.CustomerHisBusinessBillDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.born.insurance.dal.daointerface.CustomerHisBusinessBillDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/customer_his_business_bill.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisCustomerHisBusinessBillDAO extends SqlMapClientDaoSupport implements CustomerHisBusinessBillDAO {
	/**
	 *  Insert one <tt>CustomerHisBusinessBillDO</tt> object to DB table <tt>customer_his_business_bill</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into customer_his_business_bill(his_bill_id,bill_no,bill_customer_id,bill_customer_name,catalog_id,catalog_name,premium_amount,insuranceDate,beginDate,endDate,insurance_company_id,insurance_company_name,remark) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param customerHisBusinessBill
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(CustomerHisBusinessBillDO customerHisBusinessBill) throws DataAccessException {
    	if (customerHisBusinessBill == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-CUSTOMER-HIS-BUSINESS-BILL-INSERT", customerHisBusinessBill);

        return customerHisBusinessBill.getHisBillId();
    }

	/**
	 *  Update DB table <tt>customer_his_business_bill</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update customer_his_business_bill set bill_no=?, bill_customer_id=?, bill_customer_name=?, catalog_id=?, catalog_name=?, premium_amount=?, insuranceDate=?, beginDate=?, endDate=?, insurance_company_id=?, insurance_company_name=?, remark=? where (his_bill_id = ?)</tt>
	 *
	 *	@param customerHisBusinessBill
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(CustomerHisBusinessBillDO customerHisBusinessBill) throws DataAccessException {
    	if (customerHisBusinessBill == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-CUSTOMER-HIS-BUSINESS-BILL-UPDATE", customerHisBusinessBill);
    }

	/**
	 *  Query DB table <tt>customer_his_business_bill</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select his_bill_id, bill_no, bill_customer_id, bill_customer_name, catalog_id, catalog_name, premium_amount, insuranceDate, beginDate, endDate, insurance_company_id, insurance_company_name, remark from customer_his_business_bill where (his_bill_id = ?)</tt>
	 *
	 *	@param hisBillId
	 *	@return CustomerHisBusinessBillDO
	 *	@throws DataAccessException
	 */	 
    public CustomerHisBusinessBillDO findById(long hisBillId) throws DataAccessException {
        Long param = new Long(hisBillId);

        return (CustomerHisBusinessBillDO) getSqlMapClientTemplate().queryForObject("MS-CUSTOMER-HIS-BUSINESS-BILL-FIND-BY-ID", param);

    }

	/**
	 *  Delete records from DB table <tt>customer_his_business_bill</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from customer_his_business_bill where (his_bill_id = ?)</tt>
	 *
	 *	@param hisBillId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long hisBillId) throws DataAccessException {
        Long param = new Long(hisBillId);

        return getSqlMapClientTemplate().delete("MS-CUSTOMER-HIS-BUSINESS-BILL-DELETE-BY-ID", param);
    }

	/**
	 *  Delete records from DB table <tt>customer_his_business_bill</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from customer_his_business_bill where (bill_customer_id = ?)</tt>
	 *
	 *	@param billCustomerId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByUserId(long billCustomerId) throws DataAccessException {
        Long param = new Long(billCustomerId);

        return getSqlMapClientTemplate().delete("MS-CUSTOMER-HIS-BUSINESS-BILL-DELETE-BY-USER-ID", param);
    }

	/**
	 *  Query DB table <tt>customer_his_business_bill</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select his_bill_id, bill_no, bill_customer_id, bill_customer_name, catalog_id, catalog_name, premium_amount, insuranceDate, beginDate, endDate, insurance_company_id, insurance_company_name, remark from customer_his_business_bill where (1 = 1)</tt>
	 *
	 *	@param customerHisBusinessBill
	 *	@param sortCol
	 *	@param sortOrder
	 *	@param limitStart
	 *	@param pageSize
	 *	@return List<CustomerHisBusinessBillDO>
	 *	@throws DataAccessException
	 */	 
    public List<CustomerHisBusinessBillDO> findByCondition(CustomerHisBusinessBillDO customerHisBusinessBill, String sortCol, String sortOrder, long limitStart, long pageSize) throws DataAccessException {
    	if (customerHisBusinessBill == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("customerHisBusinessBill", customerHisBusinessBill);
        param.put("sortCol", sortCol);
        param.put("sortOrder", sortOrder);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));

        return getSqlMapClientTemplate().queryForList("MS-CUSTOMER-HIS-BUSINESS-BILL-FIND-BY-CONDITION", param);

    }

	/**
	 *  Query DB table <tt>customer_his_business_bill</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from customer_his_business_bill where (1 = 1)</tt>
	 *
	 *	@param customerHisBusinessBill
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(CustomerHisBusinessBillDO customerHisBusinessBill) throws DataAccessException {
    	if (customerHisBusinessBill == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}


	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-CUSTOMER-HIS-BUSINESS-BILL-FIND-BY-CONDITION-COUNT", customerHisBusinessBill);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

}
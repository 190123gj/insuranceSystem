/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.insurance.dal.ibatis;

import com.born.insurance.dal.dataobject.RelatedUserDO;
import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.born.insurance.dal.daointerface.RelatedUserDAO;


// auto generated imports
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.born.fcs.pm.dal.daointerface.RelatedUserDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/related_user.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisRelatedUserDAO extends SqlMapClientDaoSupport implements RelatedUserDAO {
	/**
	 *  Insert one <tt>RelatedUserDO</tt> object to DB table <tt>related_user</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into related_user(related_id,form_id,form_code,task_id,exe_status,project_code,user_type,user_id,user_account,user_name,user_mobile,user_email,dept_id,dept_code,dept_name,transfer_time,remark,is_current,is_del,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param relatedUser
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(RelatedUserDO relatedUser) throws DataAccessException {
    	if (relatedUser == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-RELATED-USER-INSERT", relatedUser);

        return relatedUser.getRelatedId();
    }

	/**
	 *  Update DB table <tt>related_user</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update related_user set form_id=?, form_code=?, task_id=?, exe_status=?, project_code=?, user_type=?, user_id=?, user_account=?, user_name=?, user_mobile=?, user_email=?, dept_id=?, dept_code=?, dept_name=?, transfer_time=?, remark=?, is_current=?, is_del=? where (related_id = ?)</tt>
	 *
	 *	@param relatedUser
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(RelatedUserDO relatedUser) throws DataAccessException {
    	if (relatedUser == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-RELATED-USER-UPDATE", relatedUser);
    }

	/**
	 *  Update DB table <tt>related_user</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update related_user set exe_status=?, remark=? where ((task_id = ?) AND (user_id = ?))</tt>
	 *
	 *	@param exeStatus
	 *	@param remark
	 *	@param taskId
	 *	@param userId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateExeStatus(String exeStatus, String remark, long taskId, long userId) throws DataAccessException {
        Map param = new HashMap();

        param.put("exeStatus", exeStatus);
        param.put("remark", remark);
        param.put("taskId", new Long(taskId));
        param.put("userId", new Long(userId));

        return getSqlMapClientTemplate().update("MS-RELATED-USER-UPDATE-EXE-STATUS", param);
    }

	/**
	 *  Update DB table <tt>related_user</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update related_user set exe_status=? where ((form_id = ?) AND (user_type = 'FLOW_SUBMIT_MAN'))</tt>
	 *
	 *	@param exeStatus
	 *	@param formId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateSubmitExeStatus(String exeStatus, long formId) throws DataAccessException {
        Map param = new HashMap();

        param.put("exeStatus", exeStatus);
        param.put("formId", new Long(formId));

        return getSqlMapClientTemplate().update("MS-RELATED-USER-UPDATE-SUBMIT-EXE-STATUS", param);
    }

	/**
	 *  Delete records from DB table <tt>related_user</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from related_user where ((form_id = ?) AND (exe_status = 'WAITING'))</tt>
	 *
	 *	@param formId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteWhenCancel(long formId) throws DataAccessException {
        Long param = new Long(formId);

        return getSqlMapClientTemplate().delete("MS-RELATED-USER-DELETE-WHEN-CANCEL", param);
    }

	/**
	 *  Query DB table <tt>related_user</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from related_user where (related_id = ?)</tt>
	 *
	 *	@param relatedId
	 *	@return RelatedUserDO
	 *	@throws DataAccessException
	 */	 
    public RelatedUserDO findById(long relatedId) throws DataAccessException {
        Long param = new Long(relatedId);

        return (RelatedUserDO) getSqlMapClientTemplate().queryForObject("MS-RELATED-USER-FIND-BY-ID", param);

    }

	/**
	 *  Query DB table <tt>related_user</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from related_user where (form_id = ?)</tt>
	 *
	 *	@param formId
	 *	@return List<RelatedUserDO>
	 *	@throws DataAccessException
	 */	 
    public List<RelatedUserDO> findByFormId(long formId) throws DataAccessException {
        Long param = new Long(formId);

        return getSqlMapClientTemplate().queryForList("MS-RELATED-USER-FIND-BY-FORM-ID", param);

    }

	/**
	 *  Query DB table <tt>related_user</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from related_user where (task_id = ?)</tt>
	 *
	 *	@param taskId
	 *	@return List<RelatedUserDO>
	 *	@throws DataAccessException
	 */	 
    public List<RelatedUserDO> findByTaskId(long taskId) throws DataAccessException {
        Long param = new Long(taskId);

        return getSqlMapClientTemplate().queryForList("MS-RELATED-USER-FIND-BY-TASK-ID", param);

    }

	/**
	 *  Query DB table <tt>related_user</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from related_user where (project_code = ?)</tt>
	 *
	 *	@param projectCode
	 *	@return List<RelatedUserDO>
	 *	@throws DataAccessException
	 */	 
    public List<RelatedUserDO> findByProjectCode(String projectCode) throws DataAccessException {

        return getSqlMapClientTemplate().queryForList("MS-RELATED-USER-FIND-BY-PROJECT-CODE", projectCode);

    }

	/**
	 *  Delete records from DB table <tt>related_user</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from related_user where (related_id = ?)</tt>
	 *
	 *	@param relatedId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long relatedId) throws DataAccessException {
        Long param = new Long(relatedId);

        return getSqlMapClientTemplate().delete("MS-RELATED-USER-DELETE-BY-ID", param);
    }

	/**
	 *  Delete records from DB table <tt>related_user</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from related_user where (form_id = ?)</tt>
	 *
	 *	@param formId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByFormId(long formId) throws DataAccessException {
        Long param = new Long(formId);

        return getSqlMapClientTemplate().delete("MS-RELATED-USER-DELETE-BY-FORM-ID", param);
    }

	/**
	 *  Delete records from DB table <tt>related_user</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from related_user where (project_code = ?)</tt>
	 *
	 *	@param projectCode
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByProjectCode(String projectCode) throws DataAccessException {

        return getSqlMapClientTemplate().delete("MS-RELATED-USER-DELETE-BY-PROJECT-CODE", projectCode);
    }

	/**
	 *  Delete records from DB table <tt>related_user</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from related_user where ((project_code = ?) AND (user_type = ?))</tt>
	 *
	 *	@param projectCode
	 *	@param userType
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByProjectCodeAndUserType(String projectCode, String userType) throws DataAccessException {
        Map param = new HashMap();

        param.put("projectCode", projectCode);
        param.put("userType", userType);

        return getSqlMapClientTemplate().delete("MS-RELATED-USER-DELETE-BY-PROJECT-CODE-AND-USER-TYPE", param);
    }

	/**
	 *  Query DB table <tt>related_user</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from related_user where (1 = 1)</tt>
	 *
	 *	@param relatedUser
	 *	@param deptIdList
	 *	@param exeStatusList
	 *	@param sortCol
	 *	@param sortOrder
	 *	@param limitStart
	 *	@param pageSize
	 *	@return List<RelatedUserDO>
	 *	@throws DataAccessException
	 */	 
    public List<RelatedUserDO> findByCondition(RelatedUserDO relatedUser, List deptIdList, List exeStatusList, String sortCol, String sortOrder, long limitStart, long pageSize) throws DataAccessException {
    	if (relatedUser == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("relatedUser", relatedUser);
        param.put("deptIdList", deptIdList);
        param.put("exeStatusList", exeStatusList);
        param.put("sortCol", sortCol);
        param.put("sortOrder", sortOrder);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));

        return getSqlMapClientTemplate().queryForList("MS-RELATED-USER-FIND-BY-CONDITION", param);

    }

	/**
	 *  Query DB table <tt>related_user</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from related_user where (1 = 1)</tt>
	 *
	 *	@param relatedUser
	 *	@param deptIdList
	 *	@param exeStatusList
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(RelatedUserDO relatedUser, List deptIdList, List exeStatusList) throws DataAccessException {
    	if (relatedUser == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("relatedUser", relatedUser);
        param.put("deptIdList", deptIdList);
        param.put("exeStatusList", exeStatusList);

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-RELATED-USER-FIND-BY-CONDITION-COUNT", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

}
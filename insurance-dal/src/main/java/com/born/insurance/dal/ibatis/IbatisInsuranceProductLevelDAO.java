/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.insurance.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.born.insurance.dal.daointerface.InsuranceProductLevelDAO;


// auto generated imports
import com.born.insurance.dal.dataobject.InsuranceProductLevelDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.born.insurance.dal.daointerface.InsuranceProductLevelDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/insurance_product_level.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisInsuranceProductLevelDAO extends SqlMapClientDaoSupport implements InsuranceProductLevelDAO {
	/**
	 *  Insert one <tt>InsuranceProductLevelDO</tt> object to DB table <tt>insurance_product_level</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into insurance_product_level(level_id,level,coverage_amount,premium_amount,product_id) values (?, ?, ?, ?, ?)</tt>
	 *
	 *	@param insuranceProductLevel
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(InsuranceProductLevelDO insuranceProductLevel) throws DataAccessException {
    	if (insuranceProductLevel == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-INSURANCE-PRODUCT-LEVEL-INSERT", insuranceProductLevel);

        return insuranceProductLevel.getLevelId();
    }

	/**
	 *  Update DB table <tt>insurance_product_level</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update insurance_product_level set level=?, coverage_amount=?, premium_amount=?, product_id=? where (level_id = ?)</tt>
	 *
	 *	@param insuranceProductLevel
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(InsuranceProductLevelDO insuranceProductLevel) throws DataAccessException {
    	if (insuranceProductLevel == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-INSURANCE-PRODUCT-LEVEL-UPDATE", insuranceProductLevel);
    }

	/**
	 *  Query DB table <tt>insurance_product_level</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select level_id, level, coverage_amount, premium_amount, product_id from insurance_product_level where (level_id = ?)</tt>
	 *
	 *	@param levelId
	 *	@return InsuranceProductLevelDO
	 *	@throws DataAccessException
	 */	 
    public InsuranceProductLevelDO findById(long levelId) throws DataAccessException {
        Long param = new Long(levelId);

        return (InsuranceProductLevelDO) getSqlMapClientTemplate().queryForObject("MS-INSURANCE-PRODUCT-LEVEL-FIND-BY-ID", param);

    }

	/**
	 *  Delete records from DB table <tt>insurance_product_level</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from insurance_product_level where (level_id = ?)</tt>
	 *
	 *	@param levelId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long levelId) throws DataAccessException {
        Long param = new Long(levelId);

        return getSqlMapClientTemplate().delete("MS-INSURANCE-PRODUCT-LEVEL-DELETE-BY-ID", param);
    }

	/**
	 *  Query DB table <tt>insurance_product_level</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select level_id, level, coverage_amount, premium_amount, product_id from insurance_product_level where (1 = 1)</tt>
	 *
	 *	@param insuranceProductLevel
	 *	@param sortCol
	 *	@param sortOrder
	 *	@param limitStart
	 *	@param pageSize
	 *	@return List<InsuranceProductLevelDO>
	 *	@throws DataAccessException
	 */	 
    public List<InsuranceProductLevelDO> findByCondition(InsuranceProductLevelDO insuranceProductLevel, String sortCol, String sortOrder, long limitStart, long pageSize) throws DataAccessException {
    	if (insuranceProductLevel == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("insuranceProductLevel", insuranceProductLevel);
        param.put("sortCol", sortCol);
        param.put("sortOrder", sortOrder);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));

        return getSqlMapClientTemplate().queryForList("MS-INSURANCE-PRODUCT-LEVEL-FIND-BY-CONDITION", param);

    }

	/**
	 *  Query DB table <tt>insurance_product_level</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from insurance_product_level where (1 = 1)</tt>
	 *
	 *	@param insuranceProductLevel
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(InsuranceProductLevelDO insuranceProductLevel) throws DataAccessException {
    	if (insuranceProductLevel == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}


	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-INSURANCE-PRODUCT-LEVEL-FIND-BY-CONDITION-COUNT", insuranceProductLevel);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Query DB table <tt>insurance_product_level</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select level_id, level, coverage_amount, premium_amount, product_id from insurance_product_level where (product_id = ?)</tt>
	 *
	 *	@param productId
	 *	@return List<InsuranceProductLevelDO>
	 *	@throws DataAccessException
	 */	 
    public List<InsuranceProductLevelDO> queryList(long productId) throws DataAccessException {
        Long param = new Long(productId);

        return getSqlMapClientTemplate().queryForList("MS-INSURANCE-PRODUCT-LEVEL-QUERY-LIST", param);

    }

	/**
	 *  Delete records from DB table <tt>insurance_product_level</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from insurance_product_level where (product_id = ?)</tt>
	 *
	 *	@param productId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByProductId(long productId) throws DataAccessException {
        Long param = new Long(productId);

        return getSqlMapClientTemplate().delete("MS-INSURANCE-PRODUCT-LEVEL-DELETE-BY-PRODUCT-ID", param);
    }

}
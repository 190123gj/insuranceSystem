/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.insurance.dal.daointerface;

// auto generated imports
import com.born.insurance.dal.dataobject.InsuranceCatalogDO;
import org.springframework.dao.DataAccessException;
import java.util.List;

/**
 * A dao interface provides methods to access database table <tt>insurance_catalog</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/insurance_catalog.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */
 @SuppressWarnings("rawtypes") 
public interface InsuranceCatalogDAO {
	/**
	 *  Insert one <tt>InsuranceCatalogDO</tt> object to DB table <tt>insurance_catalog</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into insurance_catalog(catalog_id,catalog_name,catalog_code,node_path,depth,last_depth,parent_catalog_id,remark,type,is_life_insurance,is_main,abbr1,abbr2,abbr3,creator_id,creator_name,price_template,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param insuranceCatalog
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(InsuranceCatalogDO insuranceCatalog) throws DataAccessException;

	/**
	 *  Update DB table <tt>insurance_catalog</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update insurance_catalog set catalog_name=?, catalog_code=?, node_path=?, depth=?, last_depth=?, parent_catalog_id=?, remark=?, type=?, is_life_insurance=?, is_main=?, abbr1=?, abbr2=?, abbr3=?, creator_id=?, creator_name=?, price_template=? where (catalog_id = ?)</tt>
	 *
	 *	@param insuranceCatalog
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(InsuranceCatalogDO insuranceCatalog) throws DataAccessException;

	/**
	 *  Query DB table <tt>insurance_catalog</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select catalog_id, catalog_name, catalog_code, node_path, depth, last_depth, parent_catalog_id, remark, type, is_life_insurance, is_main, abbr1, abbr2, abbr3, creator_id, creator_name, price_template, raw_add_time, raw_update_time from insurance_catalog where (catalog_id = ?)</tt>
	 *
	 *	@param catalogId
	 *	@return InsuranceCatalogDO
	 *	@throws DataAccessException
	 */	 
    public InsuranceCatalogDO findById(long catalogId) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>insurance_catalog</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from insurance_catalog where (catalog_id = ?)</tt>
	 *
	 *	@param catalogId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long catalogId) throws DataAccessException;

	/**
	 *  Query DB table <tt>insurance_catalog</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select catalog_id, catalog_name, catalog_code, node_path, depth, last_depth, parent_catalog_id, remark, type, is_life_insurance, is_main, abbr1, abbr2, abbr3, creator_id, creator_name, price_template, raw_add_time, raw_update_time from insurance_catalog where (1 = 1)</tt>
	 *
	 *	@param insuranceCatalog
	 *	@param sortCol
	 *	@param sortOrder
	 *	@param limitStart
	 *	@param pageSize
	 *	@param certainIds
	 *	@return List<InsuranceCatalogDO>
	 *	@throws DataAccessException
	 */	 
    public List<InsuranceCatalogDO> findByCondition(InsuranceCatalogDO insuranceCatalog, String sortCol, String sortOrder, long limitStart, long pageSize, String certainIds) throws DataAccessException;

	/**
	 *  Query DB table <tt>insurance_catalog</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from insurance_catalog where (1 = 1)</tt>
	 *
	 *	@param insuranceCatalog
	 *	@param certainIds
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(InsuranceCatalogDO insuranceCatalog, String certainIds) throws DataAccessException;

}
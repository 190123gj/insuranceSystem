/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.insurance.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.born.insurance.dal.daointerface.BillPayFeeDetailDAO;


// auto generated imports
import com.born.insurance.dal.dataobject.BillPayFeeDetailDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.born.insurance.dal.daointerface.BillPayFeeDetailDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/bill_pay_fee_detail.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisBillPayFeeDetailDAO extends SqlMapClientDaoSupport implements BillPayFeeDetailDAO {
	/**
	 *  Insert one <tt>BillPayFeeDetailDO</tt> object to DB table <tt>bill_pay_fee_detail</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into bill_pay_fee_detail(id,settlement_apply_id,business_bill_id,receiver_name,insurance_broker_no,generation_fee,service_fee,pay_fee,withhold_taxes,actual_pay_fee,row_add_time,row_update_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param billPayFeeDetail
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(BillPayFeeDetailDO billPayFeeDetail) throws DataAccessException {
    	if (billPayFeeDetail == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-BILL-PAY-FEE-DETAIL-INSERT", billPayFeeDetail);

        return billPayFeeDetail.getId();
    }

	/**
	 *  Update DB table <tt>bill_pay_fee_detail</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update bill_pay_fee_detail set settlement_apply_id=?, business_bill_id=?, receiver_name=?, insurance_broker_no=?, generation_fee=?, service_fee=?, pay_fee=?, withhold_taxes=?, actual_pay_fee=?, row_add_time=?, row_update_time=? where (id = ?)</tt>
	 *
	 *	@param billPayFeeDetail
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(BillPayFeeDetailDO billPayFeeDetail) throws DataAccessException {
    	if (billPayFeeDetail == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-BILL-PAY-FEE-DETAIL-UPDATE", billPayFeeDetail);
    }

	/**
	 *  Query DB table <tt>bill_pay_fee_detail</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, settlement_apply_id, business_bill_id, receiver_name, insurance_broker_no, generation_fee, service_fee, pay_fee, withhold_taxes, actual_pay_fee, row_add_time, row_update_time from bill_pay_fee_detail where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return BillPayFeeDetailDO
	 *	@throws DataAccessException
	 */	 
    public BillPayFeeDetailDO findById(long id) throws DataAccessException {
        Long param = new Long(id);

        return (BillPayFeeDetailDO) getSqlMapClientTemplate().queryForObject("MS-BILL-PAY-FEE-DETAIL-FIND-BY-ID", param);

    }

	/**
	 *  Delete records from DB table <tt>bill_pay_fee_detail</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from bill_pay_fee_detail where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long id) throws DataAccessException {
        Long param = new Long(id);

        return getSqlMapClientTemplate().delete("MS-BILL-PAY-FEE-DETAIL-DELETE-BY-ID", param);
    }

	/**
	 *  Query DB table <tt>bill_pay_fee_detail</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, settlement_apply_id, business_bill_id, receiver_name, insurance_broker_no, generation_fee, service_fee, pay_fee, withhold_taxes, actual_pay_fee, row_add_time, row_update_time from bill_pay_fee_detail where (1 = 1)</tt>
	 *
	 *	@param billPayFeeDetail
	 *	@param sortCol
	 *	@param sortOrder
	 *	@param limitStart
	 *	@param pageSize
	 *	@return List<BillPayFeeDetailDO>
	 *	@throws DataAccessException
	 */	 
    public List<BillPayFeeDetailDO> findByCondition(BillPayFeeDetailDO billPayFeeDetail, String sortCol, String sortOrder, long limitStart, long pageSize) throws DataAccessException {
    	if (billPayFeeDetail == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("billPayFeeDetail", billPayFeeDetail);
        param.put("sortCol", sortCol);
        param.put("sortOrder", sortOrder);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));

        return getSqlMapClientTemplate().queryForList("MS-BILL-PAY-FEE-DETAIL-FIND-BY-CONDITION", param);

    }

	/**
	 *  Query DB table <tt>bill_pay_fee_detail</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from bill_pay_fee_detail where (1 = 1)</tt>
	 *
	 *	@param billPayFeeDetail
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(BillPayFeeDetailDO billPayFeeDetail) throws DataAccessException {
    	if (billPayFeeDetail == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}


	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-BILL-PAY-FEE-DETAIL-FIND-BY-CONDITION-COUNT", billPayFeeDetail);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Query DB table <tt>bill_pay_fee_detail</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, settlement_apply_id, business_bill_id, receiver_name, insurance_broker_no, generation_fee, service_fee, pay_fee, withhold_taxes, actual_pay_fee, row_add_time, row_update_time from bill_pay_fee_detail where (settlement_apply_id = ?)</tt>
	 *
	 *	@param settlementApplyId
	 *	@return List<BillPayFeeDetailDO>
	 *	@throws DataAccessException
	 */	 
    public List<BillPayFeeDetailDO> findBySettlementApplyId(long settlementApplyId) throws DataAccessException {
        Long param = new Long(settlementApplyId);

        return getSqlMapClientTemplate().queryForList("MS-BILL-PAY-FEE-DETAIL-FIND-BY-SETTLEMENT-APPLY-ID", param);

    }

	/**
	 *  Delete records from DB table <tt>bill_pay_fee_detail</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from bill_pay_fee_detail where (settlement_apply_id = ?)</tt>
	 *
	 *	@param settlementApplyId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteBysettlementApplyId(long settlementApplyId) throws DataAccessException {
        Long param = new Long(settlementApplyId);

        return getSqlMapClientTemplate().delete("MS-BILL-PAY-FEE-DETAIL-DELETE-BYSETTLEMENT-APPLY-ID", param);
    }

}
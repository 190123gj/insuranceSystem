/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.insurance.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.born.insurance.dal.daointerface.InsuranceProtocolDAO;


// auto generated imports
import com.born.insurance.dal.dataobject.InsuranceProtocolDO;
import org.springframework.dao.DataAccessException;
import java.util.Date;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.born.insurance.dal.daointerface.InsuranceProtocolDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/insurance_protocol.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisInsuranceProtocolDAO extends SqlMapClientDaoSupport implements InsuranceProtocolDAO {
	/**
	 *  Insert one <tt>InsuranceProtocolDO</tt> object to DB table <tt>insurance_protocol</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into insurance_protocol(protocol_id,name,no,protocol_user_id,protocol_user_name,contracting_agency_id,contracting_agency_name,beginDate,endDate,remark,type,is_main,parent_id,parent_name,status,form_id,creator_id,creator_name,sign_date,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param insuranceProtocol
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(InsuranceProtocolDO insuranceProtocol) throws DataAccessException {
    	if (insuranceProtocol == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-INSURANCE-PROTOCOL-INSERT", insuranceProtocol);

        return insuranceProtocol.getProtocolId();
    }

	/**
	 *  Update DB table <tt>insurance_protocol</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update insurance_protocol set name=?, no=?, protocol_user_id=?, protocol_user_name=?, contracting_agency_id=?, contracting_agency_name=?, beginDate=?, endDate=?, remark=?, type=?, is_main=?, parent_id=?, parent_name=?, status=?, form_id=?, creator_id=?, creator_name=?, sign_date=? where (protocol_id = ?)</tt>
	 *
	 *	@param insuranceProtocol
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(InsuranceProtocolDO insuranceProtocol) throws DataAccessException {
    	if (insuranceProtocol == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-INSURANCE-PROTOCOL-UPDATE", insuranceProtocol);
    }

	/**
	 *  Query DB table <tt>insurance_protocol</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select protocol_id, name, no, protocol_user_id, protocol_user_name, contracting_agency_id, contracting_agency_name, beginDate, endDate, remark, type, is_main, parent_id, parent_name, status, form_id, creator_id, creator_name, sign_date, raw_add_time, raw_update_time from insurance_protocol where (protocol_id = ?)</tt>
	 *
	 *	@param protocolId
	 *	@return InsuranceProtocolDO
	 *	@throws DataAccessException
	 */	 
    public InsuranceProtocolDO findById(long protocolId) throws DataAccessException {
        Long param = new Long(protocolId);

        return (InsuranceProtocolDO) getSqlMapClientTemplate().queryForObject("MS-INSURANCE-PROTOCOL-FIND-BY-ID", param);

    }

	/**
	 *  Delete records from DB table <tt>insurance_protocol</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from insurance_protocol where (protocol_id = ?)</tt>
	 *
	 *	@param protocolId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long protocolId) throws DataAccessException {
        Long param = new Long(protocolId);

        return getSqlMapClientTemplate().delete("MS-INSURANCE-PROTOCOL-DELETE-BY-ID", param);
    }

	/**
	 *  Query DB table <tt>insurance_protocol</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select protocol_id, name, no, protocol_user_id, protocol_user_name, contracting_agency_id, contracting_agency_name, beginDate, endDate, remark, type, is_main, parent_id, parent_name, status, form_id, creator_id, creator_name, sign_date, raw_add_time, raw_update_time from insurance_protocol where (1 = 1)</tt>
	 *
	 *	@param insuranceProtocol
	 *	@param sortCol
	 *	@param sortOrder
	 *	@param limitStart
	 *	@param pageSize
	 *	@param currentDate
	 *	@return List<InsuranceProtocolDO>
	 *	@throws DataAccessException
	 */	 
    public List<InsuranceProtocolDO> findByCondition(InsuranceProtocolDO insuranceProtocol, String sortCol, String sortOrder, long limitStart, long pageSize, Date currentDate) throws DataAccessException {
    	if (insuranceProtocol == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("insuranceProtocol", insuranceProtocol);
        param.put("sortCol", sortCol);
        param.put("sortOrder", sortOrder);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));
        param.put("currentDate", currentDate);

        return getSqlMapClientTemplate().queryForList("MS-INSURANCE-PROTOCOL-FIND-BY-CONDITION", param);

    }

	/**
	 *  Query DB table <tt>insurance_protocol</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from insurance_protocol where (1 = 1)</tt>
	 *
	 *	@param insuranceProtocol
	 *	@param currentDate
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(InsuranceProtocolDO insuranceProtocol, Date currentDate) throws DataAccessException {
    	if (insuranceProtocol == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("insuranceProtocol", insuranceProtocol);
        param.put("currentDate", currentDate);

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-INSURANCE-PROTOCOL-FIND-BY-CONDITION-COUNT", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

}
/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.insurance.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.born.insurance.dal.daointerface.SettlementCompanyBillProcessDAO;


// auto generated imports
import com.born.insurance.dal.dataobject.SettlementCompanyBillProcessDO;
import org.springframework.dao.DataAccessException;
import java.util.Date;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.born.insurance.dal.daointerface.SettlementCompanyBillProcessDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/settlement_company_bill_process.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisSettlementCompanyBillProcessDAO extends SqlMapClientDaoSupport implements SettlementCompanyBillProcessDAO {
	/**
	 *  Insert one <tt>SettlementCompanyBillProcessDO</tt> object to DB table <tt>settlement_company_bill_process</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into settlement_company_bill_process(id,settlement_company_ids,bill_no,insurance_company_id,insurance_company_name,total_amount,total,status,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param settlementCompanyBillProcess
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(SettlementCompanyBillProcessDO settlementCompanyBillProcess) throws DataAccessException {
    	if (settlementCompanyBillProcess == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-SETTLEMENT-COMPANY-BILL-PROCESS-INSERT", settlementCompanyBillProcess);

        return settlementCompanyBillProcess.getId();
    }

	/**
	 *  Update DB table <tt>settlement_company_bill_process</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update settlement_company_bill_process set settlement_company_ids=?, bill_no=?, insurance_company_id=?, insurance_company_name=?, total_amount=?, total=?, status=? where (id = ?)</tt>
	 *
	 *	@param settlementCompanyBillProcess
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(SettlementCompanyBillProcessDO settlementCompanyBillProcess) throws DataAccessException {
    	if (settlementCompanyBillProcess == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-SETTLEMENT-COMPANY-BILL-PROCESS-UPDATE", settlementCompanyBillProcess);
    }

	/**
	 *  Query DB table <tt>settlement_company_bill_process</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, settlement_company_ids, bill_no, insurance_company_id, insurance_company_name, total_amount, total, status, raw_add_time, raw_update_time from settlement_company_bill_process where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return SettlementCompanyBillProcessDO
	 *	@throws DataAccessException
	 */	 
    public SettlementCompanyBillProcessDO findById(long id) throws DataAccessException {
        Long param = new Long(id);

        return (SettlementCompanyBillProcessDO) getSqlMapClientTemplate().queryForObject("MS-SETTLEMENT-COMPANY-BILL-PROCESS-FIND-BY-ID", param);

    }

	/**
	 *  Delete records from DB table <tt>settlement_company_bill_process</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from settlement_company_bill_process where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long id) throws DataAccessException {
        Long param = new Long(id);

        return getSqlMapClientTemplate().delete("MS-SETTLEMENT-COMPANY-BILL-PROCESS-DELETE-BY-ID", param);
    }

	/**
	 *  Query DB table <tt>settlement_company_bill_process</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, settlement_company_ids, bill_no, insurance_company_id, insurance_company_name, total_amount, total, status, raw_add_time, raw_update_time from settlement_company_bill_process where (1 = 1)</tt>
	 *
	 *	@param settlementCompanyBillProcess
	 *	@param sortCol
	 *	@param sortOrder
	 *	@param limitStart
	 *	@param pageSize
	 *	@param beginDate
	 *	@param endDate
	 *	@return List<SettlementCompanyBillProcessDO>
	 *	@throws DataAccessException
	 */	 
    public List<SettlementCompanyBillProcessDO> findByCondition(SettlementCompanyBillProcessDO settlementCompanyBillProcess, String sortCol, String sortOrder, long limitStart, long pageSize, Date beginDate, Date endDate) throws DataAccessException {
    	if (settlementCompanyBillProcess == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("settlementCompanyBillProcess", settlementCompanyBillProcess);
        param.put("sortCol", sortCol);
        param.put("sortOrder", sortOrder);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));
        param.put("beginDate", beginDate);
        param.put("endDate", endDate);

        return getSqlMapClientTemplate().queryForList("MS-SETTLEMENT-COMPANY-BILL-PROCESS-FIND-BY-CONDITION", param);

    }

	/**
	 *  Query DB table <tt>settlement_company_bill_process</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from settlement_company_bill_process where (1 = 1)</tt>
	 *
	 *	@param settlementCompanyBillProcess
	 *	@param beginDate
	 *	@param endDate
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(SettlementCompanyBillProcessDO settlementCompanyBillProcess, Date beginDate, Date endDate) throws DataAccessException {
    	if (settlementCompanyBillProcess == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("settlementCompanyBillProcess", settlementCompanyBillProcess);
        param.put("beginDate", beginDate);
        param.put("endDate", endDate);

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-SETTLEMENT-COMPANY-BILL-PROCESS-FIND-BY-CONDITION-COUNT", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Query DB table <tt>settlement_company_bill_process</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, settlement_company_ids, bill_no, insurance_company_id, insurance_company_name, total_amount, total, status, raw_add_time, raw_update_time from settlement_company_bill_process where (1 = 1)</tt>
	 *
	 *	@param billNo
	 *	@return SettlementCompanyBillProcessDO
	 *	@throws DataAccessException
	 */	 
    public SettlementCompanyBillProcessDO findSettlementCompanyBillProcess(String billNo) throws DataAccessException {

        return (SettlementCompanyBillProcessDO) getSqlMapClientTemplate().queryForObject("MS-SETTLEMENT-COMPANY-BILL-PROCESS-FIND-SETTLEMENT-COMPANY-BILL-PROCESS", billNo);

    }

}
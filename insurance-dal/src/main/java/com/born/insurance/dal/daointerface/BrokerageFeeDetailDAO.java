/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.insurance.dal.daointerface;

// auto generated imports
import com.born.insurance.dal.dataobject.BrokerageFeeDetailDO;
import org.springframework.dao.DataAccessException;
import java.util.List;

/**
 * A dao interface provides methods to access database table <tt>brokerage_fee_detail</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/brokerage_fee_detail.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */
 @SuppressWarnings("rawtypes") 
public interface BrokerageFeeDetailDAO {
	/**
	 *  Insert one <tt>BrokerageFeeDetailDO</tt> object to DB table <tt>brokerage_fee_detail</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into brokerage_fee_detail(brokerage_fee_detail_id,brokerage_fee_id,appserial_period,borkerage_scale,receivable_amount,plan_pay_date,actual_pay_date,raw_add_time,update_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param brokerageFeeDetail
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(BrokerageFeeDetailDO brokerageFeeDetail) throws DataAccessException;

	/**
	 *  Update DB table <tt>brokerage_fee_detail</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update brokerage_fee_detail set brokerage_fee_id=?, appserial_period=?, borkerage_scale=?, receivable_amount=?, plan_pay_date=?, actual_pay_date=?, update_add_time=? where (brokerage_fee_detail_id = ?)</tt>
	 *
	 *	@param brokerageFeeDetail
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(BrokerageFeeDetailDO brokerageFeeDetail) throws DataAccessException;

	/**
	 *  Query DB table <tt>brokerage_fee_detail</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select brokerage_fee_detail_id, brokerage_fee_id, appserial_period, borkerage_scale, receivable_amount, plan_pay_date, actual_pay_date, raw_add_time, update_add_time from brokerage_fee_detail where (brokerage_fee_detail_id = ?)</tt>
	 *
	 *	@param brokerageFeeDetailId
	 *	@return BrokerageFeeDetailDO
	 *	@throws DataAccessException
	 */	 
    public BrokerageFeeDetailDO findById(long brokerageFeeDetailId) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>brokerage_fee_detail</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from brokerage_fee_detail where (brokerage_fee_detail_id = ?)</tt>
	 *
	 *	@param brokerageFeeDetailId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long brokerageFeeDetailId) throws DataAccessException;

	/**
	 *  Query DB table <tt>brokerage_fee_detail</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select brokerage_fee_detail_id, brokerage_fee_id, appserial_period, borkerage_scale, receivable_amount, plan_pay_date, actual_pay_date, raw_add_time, update_add_time from brokerage_fee_detail where (1 = 1)</tt>
	 *
	 *	@param brokerageFeeDetail
	 *	@param sortCol
	 *	@param sortOrder
	 *	@param limitStart
	 *	@param pageSize
	 *	@return List<BrokerageFeeDetailDO>
	 *	@throws DataAccessException
	 */	 
    public List<BrokerageFeeDetailDO> findByCondition(BrokerageFeeDetailDO brokerageFeeDetail, String sortCol, String sortOrder, long limitStart, long pageSize) throws DataAccessException;

	/**
	 *  Query DB table <tt>brokerage_fee_detail</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from brokerage_fee_detail where (1 = 1)</tt>
	 *
	 *	@param brokerageFeeDetail
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(BrokerageFeeDetailDO brokerageFeeDetail) throws DataAccessException;

	/**
	 *  Query DB table <tt>brokerage_fee_detail</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select brokerage_fee_detail_id, brokerage_fee_id, appserial_period, borkerage_scale, receivable_amount, plan_pay_date, actual_pay_date, raw_add_time, update_add_time from brokerage_fee_detail where (brokerage_fee_id = ?)</tt>
	 *
	 *	@param brokerageFeeId
	 *	@return List<BrokerageFeeDetailDO>
	 *	@throws DataAccessException
	 */	 
    public List<BrokerageFeeDetailDO> findBrokerageFeeDetails(long brokerageFeeId) throws DataAccessException;

	/**
	 *  Query DB table <tt>brokerage_fee_detail</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select brokerage_fee_detail_id, brokerage_fee_id, appserial_period, borkerage_scale, receivable_amount, plan_pay_date, actual_pay_date, raw_add_time, update_add_time from brokerage_fee_detail where (1 = 1)</tt>
	 *
	 *	@param businessBillId
	 *	@param appserialPeriod
	 *	@return BrokerageFeeDetailDO
	 *	@throws DataAccessException
	 */	 
    public BrokerageFeeDetailDO getBrokerageFee(long businessBillId, String appserialPeriod) throws DataAccessException;

	/**
	 *  Query DB table <tt>brokerage_fee_detail</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select brokerage_fee_detail_id, brokerage_fee_id, appserial_period, borkerage_scale, receivable_amount, plan_pay_date, actual_pay_date, raw_add_time, update_add_time from brokerage_fee_detail where (1 = 1)</tt>
	 *
	 *	@param businessBillId
	 *	@return BrokerageFeeDetailDO
	 *	@throws DataAccessException
	 */	 
    public BrokerageFeeDetailDO getBrokerageFeeDetails(long businessBillId) throws DataAccessException;

	/**
	 *  Query DB table <tt>brokerage_fee_detail</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select brokerage_fee_detail_id, brokerage_fee_id, appserial_period, borkerage_scale, receivable_amount, plan_pay_date, actual_pay_date, raw_add_time, update_add_time from brokerage_fee_detail where (1 = 1)</tt>
	 *
	 *	@param businessBillId
	 *	@param appserialPeriod
	 *	@return BrokerageFeeDetailDO
	 *	@throws DataAccessException
	 */	 
    public BrokerageFeeDetailDO getBrokerageFeeDetail(long businessBillId, String appserialPeriod) throws DataAccessException;

}
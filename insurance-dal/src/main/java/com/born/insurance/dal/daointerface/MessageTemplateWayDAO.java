/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.insurance.dal.daointerface;

// auto generated imports
import com.born.insurance.dal.dataobject.MessageTemplateWayDO;
import org.springframework.dao.DataAccessException;
import java.util.List;

/**
 * A dao interface provides methods to access database table <tt>message_template_way</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/message_template_way.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */
 @SuppressWarnings("rawtypes") 
public interface MessageTemplateWayDAO {
	/**
	 *  Insert one <tt>MessageTemplateWayDO</tt> object to DB table <tt>message_template_way</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into message_template_way(id,message_template_id,notify_way,sort_order,notify_object,hour,minute) values (?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param messageTemplateWay
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(MessageTemplateWayDO messageTemplateWay) throws DataAccessException;

	/**
	 *  Update DB table <tt>message_template_way</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update message_template_way set message_template_id=?, notify_way=?, sort_order=?, notify_object=?, hour=?, minute=? where (id = ?)</tt>
	 *
	 *	@param messageTemplateWay
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(MessageTemplateWayDO messageTemplateWay) throws DataAccessException;

	/**
	 *  Query DB table <tt>message_template_way</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, message_template_id, notify_way, sort_order, notify_object, hour, minute from message_template_way where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return MessageTemplateWayDO
	 *	@throws DataAccessException
	 */	 
    public MessageTemplateWayDO findById(long id) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>message_template_way</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from message_template_way where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long id) throws DataAccessException;

	/**
	 *  Query DB table <tt>message_template_way</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, message_template_id, notify_way, sort_order, notify_object, hour, minute from message_template_way where (1 = 1)</tt>
	 *
	 *	@param messageTemplateWay
	 *	@param sortCol
	 *	@param sortOrder
	 *	@param limitStart
	 *	@param pageSize
	 *	@return List<MessageTemplateWayDO>
	 *	@throws DataAccessException
	 */	 
    public List<MessageTemplateWayDO> findByCondition(MessageTemplateWayDO messageTemplateWay, String sortCol, String sortOrder, long limitStart, long pageSize) throws DataAccessException;

	/**
	 *  Query DB table <tt>message_template_way</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from message_template_way where (1 = 1)</tt>
	 *
	 *	@param messageTemplateWay
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(MessageTemplateWayDO messageTemplateWay) throws DataAccessException;

}
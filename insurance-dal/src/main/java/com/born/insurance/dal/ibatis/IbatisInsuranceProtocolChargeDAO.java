/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.insurance.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.born.insurance.dal.daointerface.InsuranceProtocolChargeDAO;


// auto generated imports
import com.born.insurance.dal.dataobject.InsuranceProtocolChargeDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Date;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.born.insurance.dal.daointerface.InsuranceProtocolChargeDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/insurance_protocol_charge.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisInsuranceProtocolChargeDAO extends SqlMapClientDaoSupport implements InsuranceProtocolChargeDAO {
	/**
	 *  Insert one <tt>InsuranceProtocolChargeDO</tt> object to DB table <tt>insurance_protocol_charge</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into insurance_protocol_charge(charge_id,val,protocol_info_id,node_path,parent_id,depth,type,charge_type) values (?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param insuranceProtocolCharge
	 *	@return String
	 *	@throws DataAccessException
	 */	 
    public String insert(InsuranceProtocolChargeDO insuranceProtocolCharge) throws DataAccessException {
    	if (insuranceProtocolCharge == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-INSURANCE-PROTOCOL-CHARGE-INSERT", insuranceProtocolCharge);

        return insuranceProtocolCharge.getChargeId();
    }

	/**
	 *  Update DB table <tt>insurance_protocol_charge</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update insurance_protocol_charge set val=?, protocol_info_id=?, node_path=?, parent_id=?, depth=?, type=?, charge_type=? where (charge_id = ?)</tt>
	 *
	 *	@param insuranceProtocolCharge
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(InsuranceProtocolChargeDO insuranceProtocolCharge) throws DataAccessException {
    	if (insuranceProtocolCharge == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-INSURANCE-PROTOCOL-CHARGE-UPDATE", insuranceProtocolCharge);
    }

	/**
	 *  Query DB table <tt>insurance_protocol_charge</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select charge_id, val, protocol_info_id, node_path, parent_id, depth, type, charge_type from insurance_protocol_charge where (charge_id = ?)</tt>
	 *
	 *	@param chargeId
	 *	@return InsuranceProtocolChargeDO
	 *	@throws DataAccessException
	 */	 
    public InsuranceProtocolChargeDO findById(String chargeId) throws DataAccessException {

        return (InsuranceProtocolChargeDO) getSqlMapClientTemplate().queryForObject("MS-INSURANCE-PROTOCOL-CHARGE-FIND-BY-ID", chargeId);

    }

	/**
	 *  Delete records from DB table <tt>insurance_protocol_charge</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from insurance_protocol_charge where (charge_id = ?)</tt>
	 *
	 *	@param chargeId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(String chargeId) throws DataAccessException {

        return getSqlMapClientTemplate().delete("MS-INSURANCE-PROTOCOL-CHARGE-DELETE-BY-ID", chargeId);
    }

	/**
	 *  Delete records from DB table <tt>insurance_protocol_charge</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from insurance_protocol_charge where ((protocol_info_id = ?) AND ((charge_type = '') OR (charge_type IS NULL)))</tt>
	 *
	 *	@param protocolInfoId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByProtocolInfoId(long protocolInfoId) throws DataAccessException {
        Long param = new Long(protocolInfoId);

        return getSqlMapClientTemplate().delete("MS-INSURANCE-PROTOCOL-CHARGE-DELETE-BY-PROTOCOL-INFO-ID", param);
    }

	/**
	 *  Delete records from DB table <tt>insurance_protocol_charge</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from insurance_protocol_charge where ((protocol_info_id = ?) AND (type = 'PRODUCT'))</tt>
	 *
	 *	@param protocolInfoId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteProductByProtocolInfoId(long protocolInfoId) throws DataAccessException {
        Long param = new Long(protocolInfoId);

        return getSqlMapClientTemplate().delete("MS-INSURANCE-PROTOCOL-CHARGE-DELETE-PRODUCT-BY-PROTOCOL-INFO-ID", param);
    }

	/**
	 *  Query DB table <tt>insurance_protocol_charge</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select charge_id, val, protocol_info_id, node_path, parent_id, depth, type, charge_type from insurance_protocol_charge where (1 = 1)</tt>
	 *
	 *	@param insuranceProtocolCharge
	 *	@param sortCol
	 *	@param sortOrder
	 *	@param limitStart
	 *	@param pageSize
	 *	@return List<InsuranceProtocolChargeDO>
	 *	@throws DataAccessException
	 */	 
    public List<InsuranceProtocolChargeDO> findByCondition(InsuranceProtocolChargeDO insuranceProtocolCharge, String sortCol, String sortOrder, long limitStart, long pageSize) throws DataAccessException {
    	if (insuranceProtocolCharge == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("insuranceProtocolCharge", insuranceProtocolCharge);
        param.put("sortCol", sortCol);
        param.put("sortOrder", sortOrder);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));

        return getSqlMapClientTemplate().queryForList("MS-INSURANCE-PROTOCOL-CHARGE-FIND-BY-CONDITION", param);

    }

	/**
	 *  Query DB table <tt>insurance_protocol_charge</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from insurance_protocol_charge where (1 = 1)</tt>
	 *
	 *	@param insuranceProtocolCharge
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(InsuranceProtocolChargeDO insuranceProtocolCharge) throws DataAccessException {
    	if (insuranceProtocolCharge == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}


	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-INSURANCE-PROTOCOL-CHARGE-FIND-BY-CONDITION-COUNT", insuranceProtocolCharge);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Query DB table <tt>insurance_protocol_charge</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select max(val) from insurance_protocol_charge where (1 = 1)</tt>
	 *
	 *	@param insuranceProtocolCharge
	 *	@return String
	 *	@throws DataAccessException
	 */	 
    public String findByConditionMax(InsuranceProtocolChargeDO insuranceProtocolCharge) throws DataAccessException {
    	if (insuranceProtocolCharge == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}


        return (String) getSqlMapClientTemplate().queryForObject("MS-INSURANCE-PROTOCOL-CHARGE-FIND-BY-CONDITION-MAX", insuranceProtocolCharge);

    }

	/**
	 *  Query DB table <tt>insurance_protocol_charge</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select charge_id, val, protocol_info_id, node_path, parent_id, depth, type, charge_type from insurance_protocol_charge where (1 = 1)</tt>
	 *
	 *	@param insuranceProtocolCharge
	 *	@param chargeType
	 *	@param productId
	 *	@return List<InsuranceProtocolChargeDO>
	 *	@throws DataAccessException
	 */	 
    public List<InsuranceProtocolChargeDO> getInsuranceProductCharge(InsuranceProtocolChargeDO insuranceProtocolCharge, String chargeType, String productId) throws DataAccessException {
    	if (insuranceProtocolCharge == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("insuranceProtocolCharge", insuranceProtocolCharge);
        param.put("chargeType", chargeType);
        param.put("productId", productId);

        return getSqlMapClientTemplate().queryForList("MS-INSURANCE-PROTOCOL-CHARGE-GET-INSURANCE-PRODUCT-CHARGE", param);

    }

	/**
	 *  Query DB table <tt>insurance_protocol_charge</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select charge_id, val, protocol_info_id, node_path, parent_id, depth, type, charge_type from insurance_protocol_charge where (1 = 1)</tt>
	 *
	 *	@param catalogId
	 *	@param companyUserId
	 *	@param productId
	 *	@return List<InsuranceProtocolChargeDO>
	 *	@throws DataAccessException
	 */	 
    public List<InsuranceProtocolChargeDO> getInsuranceProductChargeInfo(String catalogId, String companyUserId, String productId) throws DataAccessException {
        Map param = new HashMap();

        param.put("catalogId", catalogId);
        param.put("companyUserId", companyUserId);
        param.put("productId", productId);

        return getSqlMapClientTemplate().queryForList("MS-INSURANCE-PROTOCOL-CHARGE-GET-INSURANCE-PRODUCT-CHARGE-INFO", param);

    }

	/**
	 *  Query DB table <tt>insurance_protocol_charge</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select charge_id, val, protocol_info_id, node_path, parent_id, depth, type, charge_type from insurance_protocol_charge where (1 = 1)</tt>
	 *
	 *	@param age
	 *	@param period
	 *	@param productId
	 *	@param chargeType
	 *	@return InsuranceProtocolChargeDO
	 *	@throws DataAccessException
	 */	 
    public InsuranceProtocolChargeDO getInsuranceProductChargeRate(long age, String period, String productId, String chargeType) throws DataAccessException {
        Map param = new HashMap();

        param.put("age", new Long(age));
        param.put("period", period);
        param.put("productId", productId);
        param.put("chargeType", chargeType);

        return (InsuranceProtocolChargeDO) getSqlMapClientTemplate().queryForObject("MS-INSURANCE-PROTOCOL-CHARGE-GET-INSURANCE-PRODUCT-CHARGE-RATE", param);

    }

	/**
	 *  Query DB table <tt>insurance_protocol_charge</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select charge_id, val, protocol_info_id, node_path, parent_id, depth, type, charge_type from insurance_protocol_charge where (1 = 1)</tt>
	 *
	 *	@param type
	 *	@param productId
	 *	@param companyUserId
	 *	@param catalogId
	 *	@param period
	 *	@param appserialPeriod
	 *	@param now
	 *	@return InsuranceProtocolChargeDO
	 *	@throws DataAccessException
	 */	 
    public InsuranceProtocolChargeDO getBrokerageRate(String type, long productId, long companyUserId, String catalogId, String period, String appserialPeriod, Date now) throws DataAccessException {
        Map param = new HashMap();

        param.put("type", type);
        param.put("productId", new Long(productId));
        param.put("companyUserId", new Long(companyUserId));
        param.put("catalogId", catalogId);
        param.put("period", period);
        param.put("appserialPeriod", appserialPeriod);
        param.put("now", now);

        return (InsuranceProtocolChargeDO) getSqlMapClientTemplate().queryForObject("MS-INSURANCE-PROTOCOL-CHARGE-GET-BROKERAGE-RATE", param);

    }

	/**
	 *  Query DB table <tt>insurance_protocol_charge</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select charge_id, val, protocol_info_id, node_path, parent_id, depth, type, charge_type from insurance_protocol_charge where (1 = 1)</tt>
	 *
	 *	@param type
	 *	@param productId
	 *	@param companyUserId
	 *	@param catalogId
	 *	@param appserialPeriod
	 *	@param now
	 *	@return InsuranceProtocolChargeDO
	 *	@throws DataAccessException
	 */	 
    public InsuranceProtocolChargeDO getUnLifeBrokerageRate(String type, long productId, long companyUserId, String catalogId, String appserialPeriod, Date now) throws DataAccessException {
        Map param = new HashMap();

        param.put("type", type);
        param.put("productId", new Long(productId));
        param.put("companyUserId", new Long(companyUserId));
        param.put("catalogId", catalogId);
        param.put("appserialPeriod", appserialPeriod);
        param.put("now", now);

        return (InsuranceProtocolChargeDO) getSqlMapClientTemplate().queryForObject("MS-INSURANCE-PROTOCOL-CHARGE-GET-UN-LIFE-BROKERAGE-RATE", param);

    }

	/**
	 *  Query DB table <tt>insurance_protocol_charge</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select max(val) from insurance_protocol_charge where (1 = 1)</tt>
	 *
	 *	@param productId
	 *	@param companyUserId
	 *	@param catalogId
	 *	@param period
	 *	@param now
	 *	@return String
	 *	@throws DataAccessException
	 */	 
    public String findPeriodMax(long productId, long companyUserId, String catalogId, String period, Date now) throws DataAccessException {
        Map param = new HashMap();

        param.put("productId", new Long(productId));
        param.put("companyUserId", new Long(companyUserId));
        param.put("catalogId", catalogId);
        param.put("period", period);
        param.put("now", now);

        return (String) getSqlMapClientTemplate().queryForObject("MS-INSURANCE-PROTOCOL-CHARGE-FIND-PERIOD-MAX", param);

    }

}
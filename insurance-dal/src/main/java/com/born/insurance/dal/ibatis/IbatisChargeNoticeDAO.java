/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.insurance.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.born.insurance.dal.daointerface.ChargeNoticeDAO;


// auto generated imports
import com.born.insurance.dal.dataobject.ChargeNoticeDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.born.insurance.dal.daointerface.ChargeNoticeDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/charge_notice.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisChargeNoticeDAO extends SqlMapClientDaoSupport implements ChargeNoticeDAO {
	/**
	 *  Insert one <tt>ChargeNoticeDO</tt> object to DB table <tt>charge_notice</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into charge_notice(id,form_id,business_bill_id,depart,team,notice_date,insurance_no,insurance_type_name,bill_customer_name,premium_amount,recievable_fee,recieved_fee,pay_fee,reserved_scale,notice_no,bill_no,insurance_broker_no,insurance_broker_name,commission_type,persistency_rate_ward,manage_grant,package_fee,insurance_other,row_add_time,row_update_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param chargeNotice
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(ChargeNoticeDO chargeNotice) throws DataAccessException {
    	if (chargeNotice == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-CHARGE-NOTICE-INSERT", chargeNotice);

        return chargeNotice.getId();
    }

	/**
	 *  Update DB table <tt>charge_notice</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update charge_notice set form_id=?, business_bill_id=?, depart=?, team=?, notice_date=?, insurance_no=?, insurance_type_name=?, bill_customer_name=?, premium_amount=?, recievable_fee=?, recieved_fee=?, pay_fee=?, reserved_scale=?, notice_no=?, bill_no=?, insurance_broker_no=?, insurance_broker_name=?, commission_type=?, persistency_rate_ward=?, manage_grant=?, package_fee=?, insurance_other=?, row_add_time=?, row_update_time=? where (id = ?)</tt>
	 *
	 *	@param chargeNotice
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(ChargeNoticeDO chargeNotice) throws DataAccessException {
    	if (chargeNotice == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-CHARGE-NOTICE-UPDATE", chargeNotice);
    }

	/**
	 *  Query DB table <tt>charge_notice</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, form_id, business_bill_id, depart, team, notice_date, insurance_no, insurance_type_name, bill_customer_name, premium_amount, recievable_fee, recieved_fee, pay_fee, reserved_scale, notice_no, bill_no, insurance_broker_no, insurance_broker_name, commission_type, persistency_rate_ward, manage_grant, package_fee, insurance_other, row_add_time, row_update_time from charge_notice where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return ChargeNoticeDO
	 *	@throws DataAccessException
	 */	 
    public ChargeNoticeDO findById(long id) throws DataAccessException {
        Long param = new Long(id);

        return (ChargeNoticeDO) getSqlMapClientTemplate().queryForObject("MS-CHARGE-NOTICE-FIND-BY-ID", param);

    }

	/**
	 *  Delete records from DB table <tt>charge_notice</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from charge_notice where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long id) throws DataAccessException {
        Long param = new Long(id);

        return getSqlMapClientTemplate().delete("MS-CHARGE-NOTICE-DELETE-BY-ID", param);
    }

	/**
	 *  Query DB table <tt>charge_notice</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, form_id, business_bill_id, depart, team, notice_date, insurance_no, insurance_type_name, bill_customer_name, premium_amount, recievable_fee, recieved_fee, pay_fee, reserved_scale, notice_no, bill_no, insurance_broker_no, insurance_broker_name, commission_type, persistency_rate_ward, manage_grant, package_fee, insurance_other, row_add_time, row_update_time from charge_notice where (1 = 1)</tt>
	 *
	 *	@param chargeNotice
	 *	@param sortCol
	 *	@param sortOrder
	 *	@param limitStart
	 *	@param pageSize
	 *	@return List<ChargeNoticeDO>
	 *	@throws DataAccessException
	 */	 
    public List<ChargeNoticeDO> findByCondition(ChargeNoticeDO chargeNotice, String sortCol, String sortOrder, long limitStart, long pageSize) throws DataAccessException {
    	if (chargeNotice == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("chargeNotice", chargeNotice);
        param.put("sortCol", sortCol);
        param.put("sortOrder", sortOrder);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));

        return getSqlMapClientTemplate().queryForList("MS-CHARGE-NOTICE-FIND-BY-CONDITION", param);

    }

	/**
	 *  Query DB table <tt>charge_notice</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from charge_notice where (1 = 1)</tt>
	 *
	 *	@param chargeNotice
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(ChargeNoticeDO chargeNotice) throws DataAccessException {
    	if (chargeNotice == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}


	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-CHARGE-NOTICE-FIND-BY-CONDITION-COUNT", chargeNotice);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Query DB table <tt>charge_notice</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, form_id, business_bill_id, depart, team, notice_date, insurance_no, insurance_type_name, bill_customer_name, premium_amount, recievable_fee, recieved_fee, pay_fee, reserved_scale, notice_no, bill_no, insurance_broker_no, insurance_broker_name, commission_type, persistency_rate_ward, manage_grant, package_fee, insurance_other, row_add_time, row_update_time from charge_notice where (form_id = ?)</tt>
	 *
	 *	@param formId
	 *	@return ChargeNoticeDO
	 *	@throws DataAccessException
	 */	 
    public ChargeNoticeDO findByFormId(long formId) throws DataAccessException {
        Long param = new Long(formId);

        return (ChargeNoticeDO) getSqlMapClientTemplate().queryForObject("MS-CHARGE-NOTICE-FIND-BY-FORM-ID", param);

    }

	/**
	 *  Query DB table <tt>charge_notice</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, form_id, business_bill_id, depart, team, notice_date, insurance_no, insurance_type_name, bill_customer_name, premium_amount, recievable_fee, recieved_fee, pay_fee, reserved_scale, notice_no, bill_no, insurance_broker_no, insurance_broker_name, commission_type, persistency_rate_ward, manage_grant, package_fee, insurance_other, row_add_time, row_update_time from charge_notice where (business_bill_id = ?)</tt>
	 *
	 *	@param businessBillId
	 *	@return ChargeNoticeDO
	 *	@throws DataAccessException
	 */	 
    public ChargeNoticeDO findByBusinessBillId(long businessBillId) throws DataAccessException {
        Long param = new Long(businessBillId);

        return (ChargeNoticeDO) getSqlMapClientTemplate().queryForObject("MS-CHARGE-NOTICE-FIND-BY-BUSINESS-BILL-ID", param);

    }

}
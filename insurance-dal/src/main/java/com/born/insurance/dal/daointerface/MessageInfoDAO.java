/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.insurance.dal.daointerface;

// auto generated imports
import com.born.insurance.dal.dataobject.MessageInfoDO;
import org.springframework.dao.DataAccessException;
import java.util.Date;
import java.util.List;

/**
 * A dao interface provides methods to access database table <tt>message_info</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/message_info.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */
 @SuppressWarnings("rawtypes") 
public interface MessageInfoDAO {
	/**
	 *  Insert one <tt>MessageInfoDO</tt> object to DB table <tt>message_info</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into message_info(message_id,message_title,message_type,message_status,message_subject,message_content,notification_object,view_type,link_url,notification_type,message_send_date,message_plan_send_date,message_sender_id,message_sender_name,message_sender_account,message_sender_role,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param messageInfo
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(MessageInfoDO messageInfo) throws DataAccessException;

	/**
	 *  Update DB table <tt>message_info</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update message_info set message_title=?, message_type=?, message_status=?, message_subject=?, message_content=?, notification_object=?, view_type=?, link_url=?, notification_type=?, message_send_date=?, message_plan_send_date=?, message_sender_id=?, message_sender_name=?, message_sender_account=?, message_sender_role=? where (message_id = ?)</tt>
	 *
	 *	@param messageInfo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(MessageInfoDO messageInfo) throws DataAccessException;

	/**
	 *  Query DB table <tt>message_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from message_info where (message_id = ?)</tt>
	 *
	 *	@param messageId
	 *	@return MessageInfoDO
	 *	@throws DataAccessException
	 */	 
    public MessageInfoDO findById(long messageId) throws DataAccessException;

	/**
	 *  Delete records from DB table <tt>message_info</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from message_info where (message_id = ?)</tt>
	 *
	 *	@param messageId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long messageId) throws DataAccessException;

	/**
	 *  Query DB table <tt>message_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from message_info where (1 = 1)</tt>
	 *
	 *	@param messageInfo
	 *	@param beginMessageSendDate
	 *	@param endMessageSendDate
	 *	@param beginMessageCreateDate
	 *	@param endMessageCreateDate
	 *	@param sortCol
	 *	@param sortOrder
	 *	@param limitStart
	 *	@param pageSize
	 *	@param statusList
	 *	@return List<MessageInfoDO>
	 *	@throws DataAccessException
	 */	 
    public List<MessageInfoDO> findByCondition(MessageInfoDO messageInfo, Date beginMessageSendDate, Date endMessageSendDate, Date beginMessageCreateDate, Date endMessageCreateDate, String sortCol, String sortOrder, long limitStart, long pageSize, List statusList) throws DataAccessException;

	/**
	 *  Query DB table <tt>message_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from message_info</tt>
	 *
	 *	@param messageInfo
	 *	@param beginMessageSendDate
	 *	@param endMessageSendDate
	 *	@param beginMessageCreateDate
	 *	@param endMessageCreateDate
	 *	@param statusList
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findCountByCondition(MessageInfoDO messageInfo, Date beginMessageSendDate, Date endMessageSendDate, Date beginMessageCreateDate, Date endMessageCreateDate, List statusList) throws DataAccessException;

}
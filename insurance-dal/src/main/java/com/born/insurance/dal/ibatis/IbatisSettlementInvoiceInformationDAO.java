/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.insurance.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.born.insurance.dal.daointerface.SettlementInvoiceInformationDAO;


// auto generated imports
import com.born.insurance.dal.dataobject.SettlementInvoiceInformationDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.born.insurance.dal.daointerface.SettlementInvoiceInformationDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/settlement_invoice_information.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisSettlementInvoiceInformationDAO extends SqlMapClientDaoSupport implements SettlementInvoiceInformationDAO {
	/**
	 *  Insert one <tt>SettlementInvoiceInformationDO</tt> object to DB table <tt>settlement_invoice_information</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into settlement_invoice_information(invoice_id,bill_no,invoice_no,invoice_issuing_time,logistics_company_name,logistics_number,remark,raw_add_time,row_update_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param settlementInvoiceInformation
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(SettlementInvoiceInformationDO settlementInvoiceInformation) throws DataAccessException {
    	if (settlementInvoiceInformation == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-SETTLEMENT-INVOICE-INFORMATION-INSERT", settlementInvoiceInformation);

        return settlementInvoiceInformation.getInvoiceId();
    }

	/**
	 *  Update DB table <tt>settlement_invoice_information</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update settlement_invoice_information set bill_no=?, invoice_no=?, invoice_issuing_time=?, logistics_company_name=?, logistics_number=?, remark=?, row_update_time=? where (invoice_id = ?)</tt>
	 *
	 *	@param settlementInvoiceInformation
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(SettlementInvoiceInformationDO settlementInvoiceInformation) throws DataAccessException {
    	if (settlementInvoiceInformation == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-SETTLEMENT-INVOICE-INFORMATION-UPDATE", settlementInvoiceInformation);
    }

	/**
	 *  Query DB table <tt>settlement_invoice_information</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select invoice_id, bill_no, invoice_no, invoice_issuing_time, logistics_company_name, logistics_number, remark, raw_add_time, row_update_time from settlement_invoice_information where (invoice_id = ?)</tt>
	 *
	 *	@param invoiceId
	 *	@return SettlementInvoiceInformationDO
	 *	@throws DataAccessException
	 */	 
    public SettlementInvoiceInformationDO findById(long invoiceId) throws DataAccessException {
        Long param = new Long(invoiceId);

        return (SettlementInvoiceInformationDO) getSqlMapClientTemplate().queryForObject("MS-SETTLEMENT-INVOICE-INFORMATION-FIND-BY-ID", param);

    }

	/**
	 *  Delete records from DB table <tt>settlement_invoice_information</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from settlement_invoice_information where (invoice_id = ?)</tt>
	 *
	 *	@param invoiceId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long invoiceId) throws DataAccessException {
        Long param = new Long(invoiceId);

        return getSqlMapClientTemplate().delete("MS-SETTLEMENT-INVOICE-INFORMATION-DELETE-BY-ID", param);
    }

	/**
	 *  Query DB table <tt>settlement_invoice_information</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select invoice_id, bill_no, invoice_no, invoice_issuing_time, logistics_company_name, logistics_number, remark, raw_add_time, row_update_time from settlement_invoice_information where (1 = 1)</tt>
	 *
	 *	@param settlementInvoiceInformation
	 *	@param sortCol
	 *	@param sortOrder
	 *	@param limitStart
	 *	@param pageSize
	 *	@return List<SettlementInvoiceInformationDO>
	 *	@throws DataAccessException
	 */	 
    public List<SettlementInvoiceInformationDO> findByCondition(SettlementInvoiceInformationDO settlementInvoiceInformation, String sortCol, String sortOrder, long limitStart, long pageSize) throws DataAccessException {
    	if (settlementInvoiceInformation == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("settlementInvoiceInformation", settlementInvoiceInformation);
        param.put("sortCol", sortCol);
        param.put("sortOrder", sortOrder);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));

        return getSqlMapClientTemplate().queryForList("MS-SETTLEMENT-INVOICE-INFORMATION-FIND-BY-CONDITION", param);

    }

	/**
	 *  Query DB table <tt>settlement_invoice_information</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from settlement_invoice_information where (1 = 1)</tt>
	 *
	 *	@param settlementInvoiceInformation
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(SettlementInvoiceInformationDO settlementInvoiceInformation) throws DataAccessException {
    	if (settlementInvoiceInformation == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}


	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-SETTLEMENT-INVOICE-INFORMATION-FIND-BY-CONDITION-COUNT", settlementInvoiceInformation);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Query DB table <tt>settlement_invoice_information</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select invoice_id, bill_no, invoice_no, invoice_issuing_time, logistics_company_name, logistics_number, remark, raw_add_time, row_update_time from settlement_invoice_information where (1 = 1)</tt>
	 *
	 *	@param billNo
	 *	@return SettlementInvoiceInformationDO
	 *	@throws DataAccessException
	 */	 
    public SettlementInvoiceInformationDO getSettlementInvoiceInformation(String billNo) throws DataAccessException {

        return (SettlementInvoiceInformationDO) getSqlMapClientTemplate().queryForObject("MS-SETTLEMENT-INVOICE-INFORMATION-GET-SETTLEMENT-INVOICE-INFORMATION", billNo);

    }

}
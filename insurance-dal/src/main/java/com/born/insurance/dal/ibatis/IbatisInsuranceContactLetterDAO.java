/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.insurance.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.born.insurance.dal.daointerface.InsuranceContactLetterDAO;


// auto generated imports
import com.born.insurance.dal.dataobject.InsuranceContactLetterDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.born.insurance.dal.daointerface.InsuranceContactLetterDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/insurance_contact_letter.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisInsuranceContactLetterDAO extends SqlMapClientDaoSupport implements InsuranceContactLetterDAO {
	/**
	 *  Insert one <tt>InsuranceContactLetterDO</tt> object to DB table <tt>insurance_contact_letter</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into insurance_contact_letter(letter_id,bill_no,customer_user_id,customer_user_name,customer_cert_type,customer_cert_no,customer_user_phone,customer_user_type,customer_user_sex,customer_user_address,customer_user_birth,business_user_id,business_user_name,department,company_user_id,company_user_name,price_contact_id,price_contact_name,price_contact_no,project_setup_id,project_setup_name,project,beginDate,endDate,form_id,status,is_invoice,remark,recipients,company,address,mobile,type,is_quota,insurance_type,product_id,product_name,product_level_id,product_level_level,premium_amount,is_car_sales,plate_number,guarantee_period,creator_id,creator_name,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param insuranceContactLetter
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(InsuranceContactLetterDO insuranceContactLetter) throws DataAccessException {
    	if (insuranceContactLetter == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-INSURANCE-CONTACT-LETTER-INSERT", insuranceContactLetter);

        return insuranceContactLetter.getLetterId();
    }

	/**
	 *  Update DB table <tt>insurance_contact_letter</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update insurance_contact_letter set customer_user_id=?, customer_user_name=?, customer_cert_type=?, customer_cert_no=?, customer_user_phone=?, customer_user_type=?, customer_user_sex=?, customer_user_address=?, customer_user_birth=?, business_user_id=?, business_user_name=?, department=?, company_user_id=?, company_user_name=?, price_contact_id=?, price_contact_name=?, price_contact_no=?, project_setup_id=?, project_setup_name=?, project=?, beginDate=?, endDate=?, form_id=?, status=?, is_invoice=?, remark=?, recipients=?, company=?, address=?, mobile=?, type=?, is_quota=?, insurance_type=?, product_id=?, product_name=?, product_level_id=?, product_level_level=?, premium_amount=?, is_car_sales=?, plate_number=?, guarantee_period=?, creator_id=?, creator_name=? where (letter_id = ?)</tt>
	 *
	 *	@param insuranceContactLetter
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(InsuranceContactLetterDO insuranceContactLetter) throws DataAccessException {
    	if (insuranceContactLetter == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-INSURANCE-CONTACT-LETTER-UPDATE", insuranceContactLetter);
    }

	/**
	 *  Query DB table <tt>insurance_contact_letter</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select letter_id, bill_no, customer_user_id, customer_user_name, customer_cert_type, customer_cert_no, customer_user_phone, customer_user_type, customer_user_sex, customer_user_address, customer_user_birth, business_user_id, business_user_name, department, company_user_id, company_user_name, price_contact_id, price_contact_name, price_contact_no, project_setup_id, project_setup_name, project, beginDate, endDate, form_id, status, is_invoice, remark, recipients, company, address, mobile, type, is_quota, insurance_type, product_id, product_name, product_level_id, product_level_level, premium_amount, is_car_sales, plate_number, guarantee_period, creator_id, creator_name, raw_add_time, raw_update_time from insurance_contact_letter where (letter_id = ?)</tt>
	 *
	 *	@param letterId
	 *	@return InsuranceContactLetterDO
	 *	@throws DataAccessException
	 */	 
    public InsuranceContactLetterDO findById(long letterId) throws DataAccessException {
        Long param = new Long(letterId);

        return (InsuranceContactLetterDO) getSqlMapClientTemplate().queryForObject("MS-INSURANCE-CONTACT-LETTER-FIND-BY-ID", param);

    }

	/**
	 *  Delete records from DB table <tt>insurance_contact_letter</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from insurance_contact_letter where (letter_id = ?)</tt>
	 *
	 *	@param letterId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteById(long letterId) throws DataAccessException {
        Long param = new Long(letterId);

        return getSqlMapClientTemplate().delete("MS-INSURANCE-CONTACT-LETTER-DELETE-BY-ID", param);
    }

	/**
	 *  Query DB table <tt>insurance_contact_letter</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select letter_id, bill_no, customer_user_id, customer_user_name, customer_cert_type, customer_cert_no, customer_user_phone, customer_user_type, customer_user_sex, customer_user_address, customer_user_birth, business_user_id, business_user_name, department, company_user_id, company_user_name, price_contact_id, price_contact_name, price_contact_no, project_setup_id, project_setup_name, project, beginDate, endDate, form_id, status, is_invoice, remark, recipients, company, address, mobile, type, is_quota, insurance_type, product_id, product_name, product_level_id, product_level_level, premium_amount, is_car_sales, plate_number, guarantee_period, creator_id, creator_name, raw_add_time, raw_update_time from insurance_contact_letter where (1 = 1)</tt>
	 *
	 *	@param insuranceContactLetter
	 *	@param sortCol
	 *	@param sortOrder
	 *	@param limitStart
	 *	@param pageSize
	 *	@return List<InsuranceContactLetterDO>
	 *	@throws DataAccessException
	 */	 
    public List<InsuranceContactLetterDO> findByCondition(InsuranceContactLetterDO insuranceContactLetter, String sortCol, String sortOrder, long limitStart, long pageSize) throws DataAccessException {
    	if (insuranceContactLetter == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("insuranceContactLetter", insuranceContactLetter);
        param.put("sortCol", sortCol);
        param.put("sortOrder", sortOrder);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));

        return getSqlMapClientTemplate().queryForList("MS-INSURANCE-CONTACT-LETTER-FIND-BY-CONDITION", param);

    }

	/**
	 *  Query DB table <tt>insurance_contact_letter</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from insurance_contact_letter where (1 = 1)</tt>
	 *
	 *	@param insuranceContactLetter
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(InsuranceContactLetterDO insuranceContactLetter) throws DataAccessException {
    	if (insuranceContactLetter == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}


	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-INSURANCE-CONTACT-LETTER-FIND-BY-CONDITION-COUNT", insuranceContactLetter);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

	/**
	 *  Query DB table <tt>insurance_contact_letter</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select letter_id, bill_no, customer_user_id, customer_user_name, customer_cert_type, customer_cert_no, customer_user_phone, customer_user_type, customer_user_sex, customer_user_address, customer_user_birth, business_user_id, business_user_name, department, company_user_id, company_user_name, price_contact_id, price_contact_name, price_contact_no, project_setup_id, project_setup_name, project, beginDate, endDate, form_id, status, is_invoice, remark, recipients, company, address, mobile, type, is_quota, insurance_type, product_id, product_name, product_level_id, product_level_level, premium_amount, is_car_sales, plate_number, guarantee_period, creator_id, creator_name, raw_add_time, raw_update_time from insurance_contact_letter where (form_id = ?)</tt>
	 *
	 *	@param formId
	 *	@return InsuranceContactLetterDO
	 *	@throws DataAccessException
	 */	 
    public InsuranceContactLetterDO findByFormId(long formId) throws DataAccessException {
        Long param = new Long(formId);

        return (InsuranceContactLetterDO) getSqlMapClientTemplate().queryForObject("MS-INSURANCE-CONTACT-LETTER-FIND-BY-FORM-ID", param);

    }

}
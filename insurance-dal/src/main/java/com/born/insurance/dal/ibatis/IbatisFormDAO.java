/**
 * www.yiji.com Inc.
 * Copyright (c) 2011 All Rights Reserved.
 */
package com.born.insurance.dal.ibatis;

import com.born.insurance.dal.daointerface.FormDAO;
import com.born.insurance.dal.dataobject.FormDO;
import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;


// auto generated imports
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Map;
	import java.util.HashMap;
	
/**
 * An ibatis based implementation of dao interface <tt>com.born.fcs.pm.dal.daointerface.FormDAO</tt>.
 *
 * This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>paygw</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/form.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>specialmer-dalgen</tt> 
 * to generate this file.
 *
 * @author peigen
 */ 
@SuppressWarnings({ "unchecked", "rawtypes" })

public class IbatisFormDAO extends SqlMapClientDaoSupport implements FormDAO {
	/**
	 *  Insert one <tt>FormDO</tt> object to DB table <tt>form</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into form(form_code,form_name,form_url,act_inst_id,act_def_id,def_id,run_id,task_id,status,detail_status,user_id,user_account,user_name,user_mobile,user_email,dept_id,dept_code,dept_name,dept_path,dept_path_name,check_status,submit_time,finish_time,related_project_code,task_user_data,trace,remark,raw_add_time) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param form
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(FormDO form) throws DataAccessException {
    	if (form == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-FORM-INSERT", form);

        return form.getFormId();
    }

	/**
	 *  Update DB table <tt>form</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update form set form_code=?, form_name=?, form_url=?, act_inst_id=?, act_def_id=?, def_id=?, run_id=?, task_id=?, status=?, detail_status=?, user_id=?, user_account=?, user_name=?, user_mobile=?, user_email=?, dept_id=?, dept_code=?, dept_name=?, dept_path=?, dept_path_name=?, check_status=?, submit_time=?, finish_time=?, related_project_code=?, task_user_data=?, trace=?, remark=? where (form_id = ?)</tt>
	 *
	 *	@param form
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(FormDO form) throws DataAccessException {
    	if (form == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-FORM-UPDATE", form);
    }

	/**
	 *  Query DB table <tt>form</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from form t where (form_id = ?)</tt>
	 *
	 *	@param formId
	 *	@return FormDO
	 *	@throws DataAccessException
	 */	 
    public FormDO findByFormId(long formId) throws DataAccessException {
        Long param = new Long(formId);

        return (FormDO) getSqlMapClientTemplate().queryForObject("MS-FORM-FIND-BY-FORM-ID", param);

    }

	/**
	 *  Delete records from DB table <tt>form</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from form where (form_id = ?)</tt>
	 *
	 *	@param formId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByFormId(long formId) throws DataAccessException {
        Long param = new Long(formId);

        return getSqlMapClientTemplate().delete("MS-FORM-DELETE-BY-FORM-ID", param);
    }

	/**
	 *  Query DB table <tt>form</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from form where (1 = 1)</tt>
	 *
	 *	@param form
	 *	@param statusList
	 *	@param sortCol
	 *	@param sortOrder
	 *	@param limitStart
	 *	@param pageSize
	 *	@return List<FormDO>
	 *	@throws DataAccessException
	 */	 
    public List<FormDO> findByCondition(FormDO form, List statusList, String sortCol, String sortOrder, long limitStart, long pageSize) throws DataAccessException {
    	if (form == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("form", form);
        param.put("statusList", statusList);
        param.put("sortCol", sortCol);
        param.put("sortOrder", sortOrder);
        param.put("limitStart", new Long(limitStart));
        param.put("pageSize", new Long(pageSize));

        return getSqlMapClientTemplate().queryForList("MS-FORM-FIND-BY-CONDITION", param);

    }

	/**
	 *  Query DB table <tt>form</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from form where (1 = 1)</tt>
	 *
	 *	@param form
	 *	@param statusList
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findByConditionCount(FormDO form, List statusList) throws DataAccessException {
    	if (form == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

        Map param = new HashMap();

        param.put("form", form);
        param.put("statusList", statusList);

	    Long retObj = (Long) getSqlMapClientTemplate().queryForObject("MS-FORM-FIND-BY-CONDITION-COUNT", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

    }

}
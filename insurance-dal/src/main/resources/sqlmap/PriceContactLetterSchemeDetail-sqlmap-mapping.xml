<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<!-- ==========================================================  -->
<!-- Configuration for ibatis sqlmap mapping.                    -->
<!-- ==========================================================  -->

<!-- ============================================================================= -->
<!-- This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)  -->
<!-- code generation utility specially developed for <tt>rent</tt> project.     -->
<!--                                                                               -->
<!-- PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may be     -->
<!-- OVERWRITTEN by someone else. To modify the file, you should go to directory   -->
<!-- <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and find the corresponding   -->
<!-- configuration files. Modify those files according to your needs, then run     -->
<!-- <tt>specialmer-dalgen</tt> to generate this file.                                -->
<!--                                                                               -->
<!-- @author peigen                                                             -->
<!-- ============================================================================= -->

<sqlMap namespace="specialmer">
    <!-- ============================================= -->
    <!-- RESULT MAPS                                   -->
    <!-- ============================================= -->

    <!-- result maps for database table price_contact_letter_scheme_detail -->
    <resultMap id="RM-PRICE-CONTACT-LETTER-SCHEME-DETAIL" class="com.born.insurance.dal.dataobject.PriceContactLetterSchemeDetailDO">
        <result property="id" column="id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="letterSchemeId" column="letter_scheme_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="parentCatalogId" column="parent_catalog_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="parentCatalogName" column="parent_catalog_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="catalogId" column="catalog_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="catalogName" column="catalog_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="liabilityNameId" column="liability_name_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="responsibilityScope" column="responsibility_scope" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="propertyCategory" column="property_category" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="insuranceAmount" column="insurance_amount" javaType="com.yjf.common.lang.util.money.Money" jdbcType="BIGINT"/>
        <result property="insuranceWay" column="insurance_way" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="deductibleRate" column="deductible_rate" javaType="double" jdbcType="DECIMAL" nullValue="0"/>
        <result property="premiumRate" column="premium_rate" javaType="double" jdbcType="DECIMAL" nullValue="0"/>
        <result property="limitAmountType" column="limit_amount_type" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="limitAmount" column="limit_amount" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="expectPremiumAmount" column="expect_premium_amount" javaType="com.yjf.common.lang.util.money.Money" jdbcType="BIGINT"/>
        <result property="intentionBrokerRate" column="intention_broker_rate" javaType="double" jdbcType="DECIMAL" nullValue="0"/>
        <result property="nonDeductible" column="non_deductible" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="name" column="name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="packingQuantity" column="packing_quantity" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="sign" column="sign" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="job" column="job" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="ageGroup" column="age_group" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="personNum" column="person_num" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="programme" column="programme" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="goods" column="goods" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="target" column="target" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="version" column="version" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="ext" column="ext" javaType="java.lang.String" jdbcType="VARCHAR"/>
    </resultMap>


    <!-- ============================================= -->
    <!-- mapped statements for IbatisPriceContactLetterSchemeDetailDAO -->
    <!-- ============================================= -->
    <!-- mapped statement for IbatisPriceContactLetterSchemeDetailDAO.insert -->
    <insert id="MS-PRICE-CONTACT-LETTER-SCHEME-DETAIL-INSERT">
        INSERT /*MS-YRD-PRICE-CONTACT-LETTER-SCHEME-DETAIL-INSERT*/ INTO price_contact_letter_scheme_detail(id,letter_scheme_id,parent_catalog_id,parent_catalog_name,catalog_id,catalog_name,liability_name_id,responsibility_scope,property_category,insurance_amount,insurance_way,deductible_rate,premium_rate,limit_amount_type,limit_amount,expect_premium_amount,intention_broker_rate,non_deductible,name,packing_quantity,sign,job,age_group,person_num,programme,goods,target,version,ext) VALUES (#id#,#letterSchemeId#,#parentCatalogId#,#parentCatalogName#,#catalogId#,#catalogName#,#liabilityNameId#,#responsibilityScope#,#propertyCategory#,#insuranceAmount#,#insuranceWay#,#deductibleRate#,#premiumRate#,#limitAmountType#,#limitAmount#,#expectPremiumAmount#,#intentionBrokerRate#,#nonDeductible#,#name#,#packingQuantity#,#sign#,#job#,#ageGroup#,#personNum#,#programme#,#goods#,#target#,#version#,#ext#)
		        <selectKey  resultClass ="long"  keyProperty ="id" >   
		          		 SELECT LAST_INSERT_ID() AS ID 
		      	</selectKey>
    </insert>

    <!-- mapped statement for IbatisPriceContactLetterSchemeDetailDAO.update -->
    <update id="MS-PRICE-CONTACT-LETTER-SCHEME-DETAIL-UPDATE">
    <![CDATA[
        update /*MS-YRD-PRICE-CONTACT-LETTER-SCHEME-DETAIL-UPDATE*/ price_contact_letter_scheme_detail set letter_scheme_id=#letterSchemeId#, parent_catalog_id=#parentCatalogId#, parent_catalog_name=#parentCatalogName#, catalog_id=#catalogId#, catalog_name=#catalogName#, liability_name_id=#liabilityNameId#, responsibility_scope=#responsibilityScope#, property_category=#propertyCategory#, insurance_amount=#insuranceAmount.cent#, insurance_way=#insuranceWay#, deductible_rate=#deductibleRate#, premium_rate=#premiumRate#, limit_amount_type=#limitAmountType#, limit_amount=#limitAmount#, expect_premium_amount=#expectPremiumAmount.cent#, intention_broker_rate=#intentionBrokerRate#, non_deductible=#nonDeductible#, name=#name#, packing_quantity=#packingQuantity#, sign=#sign#, job=#job#, age_group=#ageGroup#, person_num=#personNum#, programme=#programme#, goods=#goods#, target=#target#, version=#version#, ext=#ext# where (id = #id#)
    ]]>
    </update>

    <!-- mapped statement for IbatisPriceContactLetterSchemeDetailDAO.findById -->
    <select id="MS-PRICE-CONTACT-LETTER-SCHEME-DETAIL-FIND-BY-ID" resultMap="RM-PRICE-CONTACT-LETTER-SCHEME-DETAIL">
    <![CDATA[
        select /*MS-YRD-PRICE-CONTACT-LETTER-SCHEME-DETAIL-FIND-BY-ID*/ id, letter_scheme_id, parent_catalog_id, parent_catalog_name, catalog_id, catalog_name, liability_name_id, responsibility_scope, property_category, insurance_amount, insurance_way, deductible_rate, premium_rate, limit_amount_type, limit_amount, expect_premium_amount, intention_broker_rate, non_deductible, name, packing_quantity, sign, job, age_group, person_num, programme, goods, target, version, ext from price_contact_letter_scheme_detail where (id = #value#)
    ]]>
    </select>

    <!-- mapped statement for IbatisPriceContactLetterSchemeDetailDAO.deleteById -->
    <delete id="MS-PRICE-CONTACT-LETTER-SCHEME-DETAIL-DELETE-BY-ID">
    <![CDATA[
        delete /*MS-YRD-PRICE-CONTACT-LETTER-SCHEME-DETAIL-DELETE-BY-ID*/ from price_contact_letter_scheme_detail where (id = #value#)
    ]]>
    </delete>

    <!-- mapped statement for IbatisPriceContactLetterSchemeDetailDAO.findByCondition -->
    <select id="MS-PRICE-CONTACT-LETTER-SCHEME-DETAIL-FIND-BY-CONDITION" resultMap="RM-PRICE-CONTACT-LETTER-SCHEME-DETAIL">
        SELECT /*MS-YRD-PRICE-CONTACT-LETTER-SCHEME-DETAIL-FIND-BY-CONDITION*/  id ,letter_scheme_id ,parent_catalog_id ,parent_catalog_name ,catalog_id ,catalog_name ,liability_name_id ,responsibility_scope ,property_category ,insurance_amount ,insurance_way ,deductible_rate ,premium_rate ,limit_amount_type ,limit_amount ,expect_premium_amount ,intention_broker_rate ,non_deductible ,name ,packing_quantity ,sign ,job ,age_group ,person_num ,programme ,goods ,target ,version ,ext  FROM price_contact_letter_scheme_detail WHERE 1=1
             <dynamic>
                  <isGreaterThan property="priceContactLetterSchemeDetail.letterSchemeId"  compareValue="0" prepend=" and ">
	                letter_scheme_id = #priceContactLetterSchemeDetail.letterSchemeId#
	            </isGreaterThan>
			</dynamic>
	         <isNotEmpty property="sortCol" prepend=" order by ">
	             $sortCol$
	                <isNotEmpty property="sortOrder">
              	 		$sortOrder$
             		</isNotEmpty>
	         </isNotEmpty>
            LIMIT #limitStart#,#pageSize#
    </select>

    <!-- mapped statement for IbatisPriceContactLetterSchemeDetailDAO.findByConditionCount -->
    <select id="MS-PRICE-CONTACT-LETTER-SCHEME-DETAIL-FIND-BY-CONDITION-COUNT" resultClass="long">
        SELECT /*MS-YRD-PRICE-CONTACT-LETTER-SCHEME-DETAIL-FIND-BY-CONDITION-COUNT*/  count(*) FROM price_contact_letter_scheme_detail  where 1=1
	             <dynamic>
                  <isGreaterThan property="letterSchemeId"  compareValue="0" prepend=" and ">
	                letter_scheme_id = #letterSchemeId#
	            </isGreaterThan>
			</dynamic>
    </select>

</sqlMap>

<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<!-- ==========================================================  -->
<!-- Configuration for ibatis sqlmap mapping.                    -->
<!-- ==========================================================  -->

<!-- ============================================================================= -->
<!-- This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)  -->
<!-- code generation utility specially developed for <tt>rent</tt> project.     -->
<!--                                                                               -->
<!-- PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may be     -->
<!-- OVERWRITTEN by someone else. To modify the file, you should go to directory   -->
<!-- <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and find the corresponding   -->
<!-- configuration files. Modify those files according to your needs, then run     -->
<!-- <tt>specialmer-dalgen</tt> to generate this file.                                -->
<!--                                                                               -->
<!-- @author peigen                                                             -->
<!-- ============================================================================= -->

<sqlMap namespace="specialmer">
    <!-- ============================================= -->
    <!-- RESULT MAPS                                   -->
    <!-- ============================================= -->

    <!-- result maps for database table insurance_product -->
    <resultMap id="RM-INSURANCE-PRODUCT" class="com.born.insurance.dal.dataobject.InsuranceProductDO">
        <result property="productId" column="product_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="productName" column="product_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="productNo" column="product_no" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="companyUserId" column="company_user_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="companyBaseUserId" column="company_base_user_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="companyUserName" column="company_user_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="recordNumber" column="record_number" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="catalogId" column="catalog_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="catalogName" column="catalog_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="saleStatus" column="sale_status" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="stopSaleDate" column="stop_sale_date" javaType="java.util.Date" jdbcType="DATETIME"/>
        <result property="payType" column="pay_type" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="payTypeName" column="pay_type_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="payPeriod" column="pay_period" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="payPeriodName" column="pay_period_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="rateId" column="rate_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="parentProductId" column="parent_product_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="choice" column="choice" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="remark" column="remark" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="isQuota" column="is_quota" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="isLifeInsurance" column="is_life_insurance" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="abbr1" column="abbr1" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="abbr2" column="abbr2" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="abbr3" column="abbr3" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="insurancePeriodType" column="insurance_period_type" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="insurancePeriod" column="insurance_period" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="creatorId" column="creator_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="creatorName" column="creator_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="unitPrice" column="unit_price" javaType="com.yjf.common.lang.util.money.Money" jdbcType="BIGINT"/>
        <result property="periodRate" column="period_rate" javaType="double" jdbcType="DECIMAL" nullValue="0"/>
        <result property="rawAddTime" column="raw_add_time" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
        <result property="rawUpdateTime" column="raw_update_time" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
    </resultMap>


    <!-- ============================================= -->
    <!-- mapped statements for IbatisInsuranceProductDAO -->
    <!-- ============================================= -->
    <!-- mapped statement for IbatisInsuranceProductDAO.insert -->
    <insert id="MS-INSURANCE-PRODUCT-INSERT">
        INSERT /*MS-YRD-INSURANCE-PRODUCT-INSERT*/ INTO insurance_product(product_id,product_name,product_no,company_user_id,company_base_user_id,company_user_name,record_number,catalog_id,catalog_name,sale_status,stop_sale_date,pay_type,pay_type_name,pay_period,pay_period_name,rate_id,parent_product_id,choice,remark,is_quota,is_life_insurance,abbr1,abbr2,abbr3,insurance_period_type,insurance_period,creator_id,creator_name,unit_price,period_rate,raw_add_time) VALUES (#productId#,#productName#,#productNo#,#companyUserId#,#companyBaseUserId#,#companyUserName#,#recordNumber#,#catalogId#,#catalogName#,#saleStatus#,#stopSaleDate#,#payType#,#payTypeName#,#payPeriod#,#payPeriodName#,#rateId#,#parentProductId#,#choice#,#remark#,#isQuota#,#isLifeInsurance#,#abbr1#,#abbr2#,#abbr3#,#insurancePeriodType#,#insurancePeriod#,#creatorId#,#creatorName#,#unitPrice#,#periodRate#,#rawAddTime#)
		        <selectKey  resultClass ="long"  keyProperty ="productId" >
		          		 SELECT LAST_INSERT_ID() AS ID
		      	</selectKey>
    </insert>

    <!-- mapped statement for IbatisInsuranceProductDAO.update -->
    <update id="MS-INSURANCE-PRODUCT-UPDATE">
    <![CDATA[
        update /*MS-YRD-INSURANCE-PRODUCT-UPDATE*/ insurance_product set product_name=#productName#, product_no=#productNo#, company_user_id=#companyUserId#, company_base_user_id=#companyBaseUserId#, company_user_name=#companyUserName#, record_number=#recordNumber#, catalog_id=#catalogId#, catalog_name=#catalogName#, sale_status=#saleStatus#, stop_sale_date=#stopSaleDate#, pay_type=#payType#, pay_type_name=#payTypeName#, pay_period=#payPeriod#, pay_period_name=#payPeriodName#, rate_id=#rateId#, parent_product_id=#parentProductId#, choice=#choice#, remark=#remark#, is_quota=#isQuota#, is_life_insurance=#isLifeInsurance#, abbr1=#abbr1#, abbr2=#abbr2#, abbr3=#abbr3#, insurance_period_type=#insurancePeriodType#, insurance_period=#insurancePeriod#, creator_id=#creatorId#, creator_name=#creatorName#, unit_price=#unitPrice.cent#, period_rate=#periodRate# where (product_id = #productId#)
    ]]>
    </update>

    <!-- mapped statement for IbatisInsuranceProductDAO.findById -->
    <select id="MS-INSURANCE-PRODUCT-FIND-BY-ID" resultMap="RM-INSURANCE-PRODUCT">
    <![CDATA[
        select /*MS-YRD-INSURANCE-PRODUCT-FIND-BY-ID*/ product_id, product_name, product_no, company_user_id, company_base_user_id, company_user_name, record_number, catalog_id, catalog_name, sale_status, stop_sale_date, pay_type, pay_type_name, pay_period, pay_period_name, rate_id, parent_product_id, choice, remark, is_quota, is_life_insurance, abbr1, abbr2, abbr3, insurance_period_type, insurance_period, creator_id, creator_name, unit_price, period_rate, raw_add_time, raw_update_time from insurance_product where (product_id = #value#)
    ]]>
    </select>

    <!-- mapped statement for IbatisInsuranceProductDAO.deleteById -->
    <delete id="MS-INSURANCE-PRODUCT-DELETE-BY-ID">
    <![CDATA[
        delete /*MS-YRD-INSURANCE-PRODUCT-DELETE-BY-ID*/ from insurance_product where (product_id = #value#)
    ]]>
    </delete>

    <!-- mapped statement for IbatisInsuranceProductDAO.findByCondition -->
    <select id="MS-INSURANCE-PRODUCT-FIND-BY-CONDITION" resultMap="RM-INSURANCE-PRODUCT">
        SELECT /*MS-YRD-INSURANCE-PRODUCT-FIND-BY-CONDITION*/  *  FROM insurance_product WHERE 1=1
			<dynamic>
	            <isNotEmpty property="insuranceProduct.productName"   prepend=" and ">
	                product_name like concat('%', #insuranceProduct.productName#, '%')
	            </isNotEmpty>
	             <isNotEmpty property="insuranceProduct.recordNumber"   prepend=" and ">
	                record_number like concat('%', #insuranceProduct.recordNumber#, '%')
	            </isNotEmpty>
             	<isNotEqual property="insuranceProduct.companyBaseUserId" compareValue="0"  prepend=" and ">
			 	 company_base_user_id  = #insuranceProduct.companyBaseUserId#
			 	</isNotEqual>

			 	<isNotEqual property="insuranceProduct.companyUserId" compareValue="0"  prepend=" and ">
			 	 company_user_id  = #insuranceProduct.companyUserId#
			 	</isNotEqual>

			 	<isNotEmpty property="insuranceProduct.isLifeInsurance" prepend=" and ">
			 	 is_life_insurance  = #insuranceProduct.isLifeInsurance#
			 	</isNotEmpty>
			 	<isNotEmpty property="insuranceProduct.isQuota" prepend=" and ">
			 	 is_quota  = #insuranceProduct.isQuota#
			 	</isNotEmpty>
			 	<isNotEqual property="insuranceProduct.catalogId" compareValue="0" prepend=" and ">
			 	   catalog_id in (SELECT c.catalog_id FROM   insurance_catalog c ,insurance_catalog d  WHERE
			 	    c.node_path like concat('%', #insuranceProduct.catalogId#, '%') AND  d.catalog_id =#insuranceProduct.catalogId# AND  c.depth >= d.depth)
			 	</isNotEqual>
			 	<isNotEmpty property="projectSetUpCatalogIds"   prepend=" and ">
	                 catalog_id in ($projectSetUpCatalogIds$)
	            </isNotEmpty>
			 	<isNotEmpty property="insuranceProduct.saleStatus"   prepend=" and ">
	                sale_status = #insuranceProduct.saleStatus#
	            </isNotEmpty>
	            <isNotEmpty property="productIds" prepend=" and ">
	               product_id not in ($productIds$)
	            </isNotEmpty>
	             <isNotEmpty property="priceProducts" prepend=" and ">
	               product_id in ($priceProducts$)
	            </isNotEmpty>
	        </dynamic>	
	         <isNotEmpty property="sortCol" prepend=" order by ">
	             $sortCol$
	                <isNotEmpty property="sortOrder">
              	 		$sortOrder$
             		</isNotEmpty>
	         </isNotEmpty>
            LIMIT #limitStart#,#pageSize#
    </select>

    <!-- mapped statement for IbatisInsuranceProductDAO.findByConditionCount -->
    <select id="MS-INSURANCE-PRODUCT-FIND-BY-CONDITION-COUNT" resultClass="long">
        SELECT /*MS-YRD-INSURANCE-PRODUCT-FIND-BY-CONDITION-COUNT*/  count(*) FROM insurance_product  where 1=1
	           <dynamic>
	            <isNotEmpty property="insuranceProduct.productName"   prepend=" and ">
	                product_name like concat('%', #insuranceProduct.productName#, '%')
	            </isNotEmpty>
	             <isNotEmpty property="insuranceProduct.recordNumber"   prepend=" and ">
	                record_number like concat('%', #insuranceProduct.recordNumber#, '%')
	            </isNotEmpty>
             	<isNotEqual property="insuranceProduct.companyUserId" compareValue="0"  prepend=" and ">
			 	 company_user_id  = #insuranceProduct.companyUserId#
			 	</isNotEqual>
			 	<isNotEqual property="insuranceProduct.companyBaseUserId" compareValue="0"  prepend=" and ">
			 	 company_base_user_id  = #insuranceProduct.companyBaseUserId#
			 	</isNotEqual>
			 	<isNotEmpty property="insuranceProduct.isLifeInsurance" prepend=" and ">
			 	 is_life_insurance  = #insuranceProduct.isLifeInsurance#
			 	</isNotEmpty>
			 	<isNotEmpty property="insuranceProduct.isQuota" prepend=" and ">
			 	 is_quota  = #insuranceProduct.isQuota#
			 	</isNotEmpty>
			 	<isNotEqual property="insuranceProduct.catalogId" compareValue="0" prepend=" and ">
			 	   catalog_id in (SELECT c.catalog_id FROM   insurance_catalog c ,insurance_catalog d  WHERE
			 	    c.node_path like concat('%', #insuranceProduct.catalogId#, '%') AND  d.catalog_id =#insuranceProduct.catalogId# AND  c.depth >= d.depth)
			 	</isNotEqual>
			 	<isNotEmpty property="projectSetUpCatalogIds"   prepend=" and ">
	                 catalog_id in ($projectSetUpCatalogIds$)
	            </isNotEmpty>
			 	<isNotEmpty property="insuranceProduct.saleStatus"   prepend=" and ">
	                sale_status = #insuranceProduct.saleStatus#
	            </isNotEmpty>
	            <isNotEmpty property="productIds" prepend=" and ">
	               product_id not in ($productIds$)
	            </isNotEmpty>
	            <isNotEmpty property="priceProducts" prepend=" and ">
	               product_id in ($priceProducts$)
	            </isNotEmpty>
	       	   </dynamic>
    </select>

    <!-- mapped statement for IbatisInsuranceProductDAO.findOutTimeProduct -->
    <select id="MS-INSURANCE-PRODUCT-FIND-OUT-TIME-PRODUCT" resultMap="RM-INSURANCE-PRODUCT">
        SELECT /*MS-YRD-INSURANCE-PRODUCT-FIND-OUT-TIME-PRODUCT*/ * FROM
	insurance_product
WHERE
	sale_status = 0
AND stop_sale_date IS NOT NULL

AND   <![CDATA[ DATE_FORMAT(stop_sale_date, '%Y-%m-%d') < DATE_FORMAT(stop_sale_date, #dtDate#)  ]]>
    </select>

    <!-- mapped statement for IbatisInsuranceProductDAO.updateOutTimeProduct -->
    <update id="MS-INSURANCE-PRODUCT-UPDATE-OUT-TIME-PRODUCT">
        UPDATE /*MS-YRD-INSURANCE-PRODUCT-UPDATE-OUT-TIME-PRODUCT*/ insurance_product SET sale_status = 1 where product_id in ($productsId$)
    </update>

</sqlMap>

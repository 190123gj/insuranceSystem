<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<!-- ==========================================================  -->
<!-- Configuration for ibatis sqlmap mapping.                    -->
<!-- ==========================================================  -->

<!-- ============================================================================= -->
<!-- This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)  -->
<!-- code generation utility specially developed for <tt>rent</tt> project.     -->
<!--                                                                               -->
<!-- PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may be     -->
<!-- OVERWRITTEN by someone else. To modify the file, you should go to directory   -->
<!-- <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and find the corresponding   -->
<!-- configuration files. Modify those files according to your needs, then run     -->
<!-- <tt>specialmer-dalgen</tt> to generate this file.                                -->
<!--                                                                               -->
<!-- @author peigen                                                             -->
<!-- ============================================================================= -->

<sqlMap namespace="specialmer">
    <!-- ============================================= -->
    <!-- RESULT MAPS                                   -->
    <!-- ============================================= -->

    <!-- result maps for database table customer_protocol -->
    <resultMap id="RM-CUSTOMER-PROTOCOL" class="com.born.insurance.dal.dataobject.CustomerProtocolDO">
        <result property="id" column="id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="name" column="name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="no" column="no" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="customerUserId" column="customer_user_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="customerUserName" column="customer_user_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="certType" column="cert_type" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="certNo" column="cert_no" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="beginDate" column="beginDate" javaType="java.util.Date" jdbcType="DATETIME"/>
        <result property="endDate" column="endDate" javaType="java.util.Date" jdbcType="DATETIME"/>
        <result property="status" column="status" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="remark" column="remark" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="relationProtocolId" column="relation_protocol_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="creatorId" column="creator_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="creatorName" column="creator_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="rawAddTime" column="raw_add_time" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
        <result property="rawUpdateTime" column="raw_update_time" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
    </resultMap>


    <!-- ============================================= -->
    <!-- mapped statements for IbatisCustomerProtocolDAO -->
    <!-- ============================================= -->
    <!-- mapped statement for IbatisCustomerProtocolDAO.insert -->
    <insert id="MS-CUSTOMER-PROTOCOL-INSERT">
        INSERT /*MS-YRD-CUSTOMER-PROTOCOL-INSERT*/ INTO customer_protocol(id,name,no,customer_user_id,customer_user_name,cert_type,cert_no,beginDate,endDate,status,remark,relation_protocol_id,creator_id,creator_name,raw_add_time) VALUES (#id#,#name#,#no#,#customerUserId#,#customerUserName#,#certType#,#certNo#,#beginDate#,#endDate#,#status#,#remark#,#relationProtocolId#,#creatorId#,#creatorName#,#rawAddTime#)
		        <selectKey  resultClass ="long"  keyProperty ="id" >
		          		 SELECT LAST_INSERT_ID() AS ID
		      	</selectKey>
    </insert>

    <!-- mapped statement for IbatisCustomerProtocolDAO.update -->
    <update id="MS-CUSTOMER-PROTOCOL-UPDATE">
    <![CDATA[
        update /*MS-YRD-CUSTOMER-PROTOCOL-UPDATE*/ customer_protocol set name=#name#, no=#no#, customer_user_id=#customerUserId#, customer_user_name=#customerUserName#, cert_type=#certType#, cert_no=#certNo#, beginDate=#beginDate#, endDate=#endDate#, status=#status#, remark=#remark#, relation_protocol_id=#relationProtocolId#, creator_id=#creatorId#, creator_name=#creatorName# where (id = #id#)
    ]]>
    </update>

    <!-- mapped statement for IbatisCustomerProtocolDAO.findById -->
    <select id="MS-CUSTOMER-PROTOCOL-FIND-BY-ID" resultMap="RM-CUSTOMER-PROTOCOL">
    <![CDATA[
        select /*MS-YRD-CUSTOMER-PROTOCOL-FIND-BY-ID*/ id, name, no, customer_user_id, customer_user_name, cert_type, cert_no, beginDate, endDate, status, remark, relation_protocol_id, creator_id, creator_name, raw_add_time, raw_update_time from customer_protocol where (id = #value#)
    ]]>
    </select>

    <!-- mapped statement for IbatisCustomerProtocolDAO.deleteById -->
    <delete id="MS-CUSTOMER-PROTOCOL-DELETE-BY-ID">
    <![CDATA[
        delete /*MS-YRD-CUSTOMER-PROTOCOL-DELETE-BY-ID*/ from customer_protocol where (id = #value#)
    ]]>
    </delete>

    <!-- mapped statement for IbatisCustomerProtocolDAO.findByCondition -->
    <select id="MS-CUSTOMER-PROTOCOL-FIND-BY-CONDITION" resultMap="RM-CUSTOMER-PROTOCOL">
        SELECT /*MS-YRD-CUSTOMER-PROTOCOL-FIND-BY-CONDITION*/  id ,name ,no ,customer_user_id ,customer_user_name ,cert_type ,cert_no ,beginDate ,endDate ,status ,remark ,relation_protocol_id ,creator_id ,creator_name ,raw_add_time ,raw_update_time  FROM customer_protocol where 1=1

	         <isNotEmpty property="sortCol" prepend=" order by ">
	             $sortCol$
	                <isNotEmpty property="sortOrder">
              	 		$sortOrder$
             		</isNotEmpty>
	         </isNotEmpty>
            LIMIT #limitStart#,#pageSize#
    </select>

    <!-- mapped statement for IbatisCustomerProtocolDAO.findByConditionCount -->
    <select id="MS-CUSTOMER-PROTOCOL-FIND-BY-CONDITION-COUNT" resultClass="long">
        SELECT /*MS-YRD-CUSTOMER-PROTOCOL-FIND-BY-CONDITION-COUNT*/  count(*) FROM customer_protocol  where 1=1
    </select>

</sqlMap>

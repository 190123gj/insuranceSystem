<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<!-- ==========================================================  -->
<!-- Configuration for ibatis sqlmap mapping.                    -->
<!-- ==========================================================  -->

<!-- ============================================================================= -->
<!-- This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)  -->
<!-- code generation utility specially developed for <tt>rent</tt> project.     -->
<!--                                                                               -->
<!-- PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may be     -->
<!-- OVERWRITTEN by someone else. To modify the file, you should go to directory   -->
<!-- <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and find the corresponding   -->
<!-- configuration files. Modify those files according to your needs, then run     -->
<!-- <tt>specialmer-dalgen</tt> to generate this file.                                -->
<!--                                                                               -->
<!-- @author peigen                                                             -->
<!-- ============================================================================= -->

<sqlMap namespace="specialmer">
    <!-- ============================================= -->
    <!-- RESULT MAPS                                   -->
    <!-- ============================================= -->

    <!-- result maps for database table insurance_protocol_charge -->
    <resultMap id="RM-INSURANCE-PROTOCOL-CHARGE" class="com.born.insurance.dal.dataobject.InsuranceProtocolChargeDO">
        <result property="chargeId" column="charge_id" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="val" column="val" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="protocolInfoId" column="protocol_info_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="nodePath" column="node_path" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="parentId" column="parent_id" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="depth" column="depth" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="type" column="type" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="chargeType" column="charge_type" javaType="java.lang.String" jdbcType="VARCHAR"/>
    </resultMap>


    <!-- ============================================= -->
    <!-- mapped statements for IbatisInsuranceProtocolChargeDAO -->
    <!-- ============================================= -->
    <!-- mapped statement for IbatisInsuranceProtocolChargeDAO.insert -->
    <insert id="MS-INSURANCE-PROTOCOL-CHARGE-INSERT">
        INSERT /*MS-YRD-INSURANCE-PROTOCOL-CHARGE-INSERT*/ INTO insurance_protocol_charge(charge_id,val,protocol_info_id,node_path,parent_id,depth,type,charge_type) VALUES (#chargeId#,#val#,#protocolInfoId#,#nodePath#,#parentId#,#depth#,#type#,#chargeType#)
    </insert>

    <!-- mapped statement for IbatisInsuranceProtocolChargeDAO.update -->
    <update id="MS-INSURANCE-PROTOCOL-CHARGE-UPDATE">
    <![CDATA[
        update /*MS-YRD-INSURANCE-PROTOCOL-CHARGE-UPDATE*/ insurance_protocol_charge set val=#val#, protocol_info_id=#protocolInfoId#, node_path=#nodePath#, parent_id=#parentId#, depth=#depth#, type=#type#, charge_type=#chargeType# where (charge_id = #chargeId#)
    ]]>
    </update>

    <!-- mapped statement for IbatisInsuranceProtocolChargeDAO.findById -->
    <select id="MS-INSURANCE-PROTOCOL-CHARGE-FIND-BY-ID" resultMap="RM-INSURANCE-PROTOCOL-CHARGE">
    <![CDATA[
        select /*MS-YRD-INSURANCE-PROTOCOL-CHARGE-FIND-BY-ID*/ charge_id, val, protocol_info_id, node_path, parent_id, depth, type, charge_type from insurance_protocol_charge where (charge_id = #value#)
    ]]>
    </select>

    <!-- mapped statement for IbatisInsuranceProtocolChargeDAO.deleteById -->
    <delete id="MS-INSURANCE-PROTOCOL-CHARGE-DELETE-BY-ID">
    <![CDATA[
        delete /*MS-YRD-INSURANCE-PROTOCOL-CHARGE-DELETE-BY-ID*/ from insurance_protocol_charge where (charge_id = #value#)
    ]]>
    </delete>

    <!-- mapped statement for IbatisInsuranceProtocolChargeDAO.deleteByProtocolInfoId -->
    <delete id="MS-INSURANCE-PROTOCOL-CHARGE-DELETE-BY-PROTOCOL-INFO-ID">
    <![CDATA[
        delete /*MS-YRD-INSURANCE-PROTOCOL-CHARGE-DELETE-BY-PROTOCOL-INFO-ID*/ from insurance_protocol_charge where ((protocol_info_id = #value#) AND ((charge_type = '') OR (charge_type IS NULL)))
    ]]>
    </delete>

    <!-- mapped statement for IbatisInsuranceProtocolChargeDAO.deleteProductByProtocolInfoId -->
    <delete id="MS-INSURANCE-PROTOCOL-CHARGE-DELETE-PRODUCT-BY-PROTOCOL-INFO-ID">
    <![CDATA[
        delete /*MS-YRD-INSURANCE-PROTOCOL-CHARGE-DELETE-PRODUCT-BY-PROTOCOL-INFO-ID*/ from insurance_protocol_charge where ((protocol_info_id = #value#) AND (type = 'PRODUCT'))
    ]]>
    </delete>

    <!-- mapped statement for IbatisInsuranceProtocolChargeDAO.findByCondition -->
    <select id="MS-INSURANCE-PROTOCOL-CHARGE-FIND-BY-CONDITION" resultMap="RM-INSURANCE-PROTOCOL-CHARGE">
        SELECT /*MS-YRD-INSURANCE-PROTOCOL-CHARGE-FIND-BY-CONDITION*/  charge_id ,val ,protocol_info_id ,node_path ,parent_id ,depth ,type ,charge_type  FROM insurance_protocol_charge WHERE 1=1

	        <dynamic>
	            <isNotEmpty property="insuranceProtocolCharge.parentId"   prepend=" and ">
	                parent_id =#insuranceProtocolCharge.parentId#
	            </isNotEmpty>
	             <isNotEmpty property="insuranceProtocolCharge.depth"   prepend=" and ">
	                depth =#insuranceProtocolCharge.depth#
	            </isNotEmpty>


	            <isNotEmpty property="insuranceProtocolCharge.chargeType"   prepend=" and ">
	                charge_type =#insuranceProtocolCharge.chargeType#
	            </isNotEmpty>
                <isNotEmpty property="insuranceProtocolCharge.type"   prepend=" and ">
	                type =#insuranceProtocolCharge.type#
	            </isNotEmpty>

	            <isNotEmpty property="insuranceProtocolCharge.protocolInfoId"   prepend=" and ">
	                protocol_info_id =#insuranceProtocolCharge.protocolInfoId#
	            </isNotEmpty>
	        </dynamic>
	         <isNotEmpty property="sortCol" prepend=" order by ">
	             $sortCol$
	                <isNotEmpty property="sortOrder">
              	 		$sortOrder$
             		</isNotEmpty>
	         </isNotEmpty>
            LIMIT #limitStart#,#pageSize#
    </select>

    <!-- mapped statement for IbatisInsuranceProtocolChargeDAO.findByConditionCount -->
    <select id="MS-INSURANCE-PROTOCOL-CHARGE-FIND-BY-CONDITION-COUNT" resultClass="long">
        SELECT /*MS-YRD-INSURANCE-PROTOCOL-CHARGE-FIND-BY-CONDITION-COUNT*/  count(*) FROM insurance_protocol_charge  where 1=1
	            <dynamic>
	            <isNotEmpty property="insuranceProtocolCharge.parentId"   prepend=" and ">
	                parent_id =#insuranceProtocolCharge.parentId#
	            </isNotEmpty>

	            <isNotEmpty property="chargeType"  prepend=" and ">
	                charge_type =#chargeType#
	            </isNotEmpty>

	            <isNotEmpty property="type"   prepend=" and ">
	                type =#type#
	            </isNotEmpty>



	             <isNotEmpty property="insuranceProtocolCharge.depth"   prepend=" and ">
	                depth =#insuranceProtocolCharge.depth#
	            </isNotEmpty>
	            <isNotEmpty property="insuranceProtocolCharge.protocolInfoId"   prepend=" and ">
	                protocol_info_id =#insuranceProtocolCharge.protocolInfoId#
	            </isNotEmpty>

	        </dynamic>
    </select>

    <!-- mapped statement for IbatisInsuranceProtocolChargeDAO.findByConditionMax -->
    <select id="MS-INSURANCE-PROTOCOL-CHARGE-FIND-BY-CONDITION-MAX" resultClass="java.lang.String">
        SELECT /*MS-YRD-INSURANCE-PROTOCOL-CHARGE-FIND-BY-CONDITION-MAX*/  max(val) FROM insurance_protocol_charge  where 1=1
	            <dynamic>
	             <isNotEmpty property="depth"   prepend=" and ">
	                depth =#depth#
	            </isNotEmpty>
	            <isNotEmpty property="protocolInfoId"   prepend=" and ">
	                protocol_info_id =#protocolInfoId#
	            </isNotEmpty>

	        </dynamic>
    </select>

    <!-- mapped statement for IbatisInsuranceProtocolChargeDAO.getInsuranceProductCharge -->
    <select id="MS-INSURANCE-PROTOCOL-CHARGE-GET-INSURANCE-PRODUCT-CHARGE" resultMap="RM-INSURANCE-PROTOCOL-CHARGE">
        SELECT /*MS-YRD-INSURANCE-PROTOCOL-CHARGE-GET-INSURANCE-PRODUCT-CHARGE*/ charge_id ,val ,protocol_info_id ,node_path ,parent_id ,depth ,type ,charge_type from insurance_protocol_charge where 1=1  and depth = 2 
	        	 <dynamic>
	             <isNotEmpty property="chargeType"   prepend=" and ">
	                charge_type =#chargeType#
	            </isNotEmpty>
	            <isNotEmpty property="productId"   prepend=" and ">
	                protocol_info_id =#productId#
	            </isNotEmpty>
	             </dynamic>
	           GROUP BY val
    </select>

    <!-- mapped statement for IbatisInsuranceProtocolChargeDAO.getInsuranceProductChargeInfo -->
    <select id="MS-INSURANCE-PROTOCOL-CHARGE-GET-INSURANCE-PRODUCT-CHARGE-INFO" resultMap="RM-INSURANCE-PROTOCOL-CHARGE">
        SELECT /*MS-YRD-INSURANCE-PROTOCOL-CHARGE-GET-INSURANCE-PRODUCT-CHARGE-INFO*/ charge_id ,val ,protocol_info_id ,node_path ,parent_id ,depth ,type ,charge_type from insurance_protocol_charge  where protocol_info_id in (
SELECT protocol_info_id from insurance_protocol_info where protocol_id in (
SELECT protocol_id from insurance_protocol where type='INSURANCE_PROTOCOL' and protocol_user_id = #companyUserId#
) 
	<isNotEmpty property="productId" prepend=" and ">
        product_id =#productId#
   </isNotEmpty>
	<isNotEmpty property="catalogId" prepend=" and ">
        catalog_id = #catalogId# and product_id is null
     </isNotEmpty>
) and parent_id = 0
    </select>

    <!-- mapped statement for IbatisInsuranceProtocolChargeDAO.getInsuranceProductChargeRate -->
    <select id="MS-INSURANCE-PROTOCOL-CHARGE-GET-INSURANCE-PRODUCT-CHARGE-RATE" resultMap="RM-INSURANCE-PROTOCOL-CHARGE">
        SELECT /*MS-YRD-INSURANCE-PROTOCOL-CHARGE-GET-INSURANCE-PRODUCT-CHARGE-RATE*/ 	charge_id ,val ,protocol_info_id ,node_path ,parent_id ,depth ,type ,charge_type
FROM
	insurance_protocol_charge
WHERE
	parent_id = (
		SELECT
			charge_id
		FROM
			insurance_protocol_charge
		WHERE
			parent_id = (
				SELECT
					charge_id
				FROM
					insurance_protocol_charge
				WHERE
					parent_id = 0
				AND type = 'product'
				AND protocol_info_id = #productId#
				AND val = #age#
			)
		AND charge_type = #chargeType#
		AND val = #period#
	)
    </select>

    <!-- mapped statement for IbatisInsuranceProtocolChargeDAO.getBrokerageRate -->
    <select id="MS-INSURANCE-PROTOCOL-CHARGE-GET-BROKERAGE-RATE" resultMap="RM-INSURANCE-PROTOCOL-CHARGE">
        SELECT /*MS-YRD-INSURANCE-PROTOCOL-CHARGE-GET-BROKERAGE-RATE*/ 	*
FROM
	insurance_protocol_charge
WHERE
	parent_id in (
		SELECT
			charge_id
		FROM
			insurance_protocol_charge
		WHERE
			parent_id in (
				SELECT
					charge_id
				FROM
					insurance_protocol_charge
				WHERE
					protocol_info_id in (
						SELECT
							b.protocol_info_id
						FROM
							insurance_protocol a
						RIGHT JOIN insurance_protocol_info b ON a.protocol_id = b.protocol_id
						WHERE a.type = #type# and a.protocol_user_id = #companyUserId# 
						<isEqual property="type" compareProperty="INSURANCE_PROTOCOL" prepend=" and ">
						<![CDATA[ a.beginDate <= #now#  ]]> and  <![CDATA[ a.endDate >= #now#  ]]>
						</isEqual>
							<isNotEmpty property="productId"   prepend=" and ">
	                           b.product_id =#productId#
	           				 </isNotEmpty>
							<isNotEmpty property="catalogId"   prepend=" and ">
				                b.catalog_id =#"catalogId"# and b.product_id is null
				            </isNotEmpty>
					)
				AND depth = 1
				AND val = #period#
			)
		AND depth = 2
		AND val = #appserialPeriod#
	) limit 0,1
    </select>

    <!-- mapped statement for IbatisInsuranceProtocolChargeDAO.getUnLifeBrokerageRate -->
    <select id="MS-INSURANCE-PROTOCOL-CHARGE-GET-UN-LIFE-BROKERAGE-RATE" resultMap="RM-INSURANCE-PROTOCOL-CHARGE">
        SELECT /*MS-YRD-INSURANCE-PROTOCOL-CHARGE-GET-UN-LIFE-BROKERAGE-RATE*/ 	*
FROM
	insurance_protocol_charge
WHERE
	parent_id in (
		SELECT
			charge_id
		FROM
			insurance_protocol_charge
		WHERE
			parent_id in (
				SELECT
					charge_id
				FROM
					insurance_protocol_charge
				WHERE
					protocol_info_id in (
						SELECT
							b.protocol_info_id
						FROM
							insurance_protocol a
						RIGHT JOIN insurance_protocol_info b ON a.protocol_id = b.protocol_id
						WHERE a.type = #type# and a.protocol_user_id = #companyUserId# 
						<isEqual property="type" compareProperty="INSURANCE_PROTOCOL" prepend=" and ">
						<![CDATA[ a.beginDate <= #now#  ]]> and  <![CDATA[ a.endDate >= #now#  ]]>
						</isEqual>
							<isNotEmpty property="productId"   prepend=" and ">
	                           b.product_id =#productId#
	           				 </isNotEmpty>
							<isNotEmpty property="catalogId"   prepend=" and ">
				                b.catalog_id =#"catalogId"# and b.product_id is null
				            </isNotEmpty>
					)
				AND depth = 1
			)
		AND depth = 2
		AND val = #appserialPeriod#
	)  LIMIT 0,1
    </select>

    <!-- mapped statement for IbatisInsuranceProtocolChargeDAO.findPeriodMax -->
    <select id="MS-INSURANCE-PROTOCOL-CHARGE-FIND-PERIOD-MAX" resultClass="java.lang.String">
        SELECT /*MS-YRD-INSURANCE-PROTOCOL-CHARGE-FIND-PERIOD-MAX*/ 			MAX(val)
		FROM
			insurance_protocol_charge
		WHERE
			parent_id = (
				SELECT
					charge_id
				FROM
					insurance_protocol_charge
				WHERE
					protocol_info_id = (
						SELECT
							b.protocol_info_id
						FROM
							insurance_protocol a
						RIGHT JOIN insurance_protocol_info b ON a.protocol_id = b.protocol_id 
						where <![CDATA[ a.beginDate <= #now#  ]]> and  <![CDATA[ a.endDate >= #now#  ]]> and a.protocol_user_id = #companyUserId# 
							<isNotEmpty property="productId"   prepend=" and ">
	                           b.product_id =#productId#
	           				 </isNotEmpty>
							<isNotEmpty property="catalogId"   prepend=" and ">
				                b.catalog_id =#"catalogId"# and b.product_id is null
				            </isNotEmpty>
					)
				AND depth = 1
				AND val = #period#
			)
    </select>

</sqlMap>

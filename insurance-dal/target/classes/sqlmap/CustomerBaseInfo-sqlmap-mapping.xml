<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<!-- ==========================================================  -->
<!-- Configuration for ibatis sqlmap mapping.                    -->
<!-- ==========================================================  -->

<!-- ============================================================================= -->
<!-- This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)  -->
<!-- code generation utility specially developed for <tt>rent</tt> project.     -->
<!--                                                                               -->
<!-- PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may be     -->
<!-- OVERWRITTEN by someone else. To modify the file, you should go to directory   -->
<!-- <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and find the corresponding   -->
<!-- configuration files. Modify those files according to your needs, then run     -->
<!-- <tt>specialmer-dalgen</tt> to generate this file.                                -->
<!--                                                                               -->
<!-- @author peigen                                                             -->
<!-- ============================================================================= -->

<sqlMap namespace="specialmer">
    <!-- ============================================= -->
    <!-- RESULT MAPS                                   -->
    <!-- ============================================= -->

    <!-- result maps for database table customer_base_info -->
    <resultMap id="RM-CUSTOMER-BASE-INFO" class="com.born.insurance.dal.dataobject.CustomerBaseInfoDO">
        <result property="userId" column="user_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="customerId" column="customer_id" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="customerName" column="customer_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="contactMobile" column="contact_mobile" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="certType" column="cert_type" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="certNo" column="cert_no" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="certExpDate" column="cert_exp_date" javaType="java.util.Date" jdbcType="DATETIME"/>
        <result property="longTime" column="long_time" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="countryCode" column="country_code" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="countryName" column="country_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="provinceCode" column="province_code" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="provinceName" column="province_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="cityCode" column="city_code" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="cityName" column="city_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="countyCode" column="county_code" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="countyName" column="county_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="address" column="address" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="email" column="email" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="mobile" column="mobile" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="telphone" column="telphone" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="fix" column="fix" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="weixin" column="weixin" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="qq" column="qq" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="status" column="status" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="businessUserId" column="business_user_id" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="businessUserName" column="business_user_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="creatorId" column="creator_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="creatorName" column="creator_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="customerType" column="customer_type" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="abbr1" column="abbr1" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="abbr2" column="abbr2" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="abbr3" column="abbr3" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="ownerId" column="owner_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="ownerUserName" column="owner_user_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="outUser" column="out_user" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="remark" column="remark" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="refereeId" column="referee_id" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="refereeName" column="referee_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="rawAddTime" column="raw_add_time" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
        <result property="rawUpdateTime" column="raw_update_time" javaType="java.util.Date" jdbcType="TIMESTAMP"/>
    </resultMap>


    <!-- ============================================= -->
    <!-- mapped statements for IbatisCustomerBaseInfoDAO -->
    <!-- ============================================= -->
    <!-- mapped statement for IbatisCustomerBaseInfoDAO.insert -->
    <insert id="MS-CUSTOMER-BASE-INFO-INSERT">
        INSERT /*MS-YRD-CUSTOMER-BASE-INFO-INSERT*/ INTO customer_base_info(user_id,customer_id,customer_name,contact_mobile,cert_type,cert_no,cert_exp_date,long_time,country_code,country_name,province_code,province_name,city_code,city_name,county_code,county_name,address,email,mobile,telphone,fix,weixin,qq,status,business_user_id,business_user_name,creator_id,creator_name,customer_type,abbr1,abbr2,abbr3,owner_id,owner_user_name,out_user,remark,referee_id,referee_name,raw_add_time) VALUES (#userId#,#customerId#,#customerName#,#contactMobile#,#certType#,#certNo#,#certExpDate#,#longTime#,#countryCode#,#countryName#,#provinceCode#,#provinceName#,#cityCode#,#cityName#,#countyCode#,#countyName#,#address#,#email#,#mobile#,#telphone#,#fix#,#weixin#,#qq#,#status#,#businessUserId#,#businessUserName#,#creatorId#,#creatorName#,#customerType#,#abbr1#,#abbr2#,#abbr3#,#ownerId#,#ownerUserName#,#outUser#,#remark#,#refereeId#,#refereeName#,#rawAddTime#)
		        <selectKey  resultClass ="long"  keyProperty ="userId" >
		          		 SELECT LAST_INSERT_ID() AS ID
		      	</selectKey>
    </insert>

    <!-- mapped statement for IbatisCustomerBaseInfoDAO.update -->
    <update id="MS-CUSTOMER-BASE-INFO-UPDATE">
    <![CDATA[
        update /*MS-YRD-CUSTOMER-BASE-INFO-UPDATE*/ customer_base_info set customer_id=#customerId#, customer_name=#customerName#, contact_mobile=#contactMobile#, cert_type=#certType#, cert_no=#certNo#, cert_exp_date=#certExpDate#, long_time=#longTime#, country_code=#countryCode#, country_name=#countryName#, province_code=#provinceCode#, province_name=#provinceName#, city_code=#cityCode#, city_name=#cityName#, county_code=#countyCode#, county_name=#countyName#, address=#address#, email=#email#, mobile=#mobile#, telphone=#telphone#, fix=#fix#, weixin=#weixin#, qq=#qq#, status=#status#, business_user_id=#businessUserId#, business_user_name=#businessUserName#, creator_id=#creatorId#, creator_name=#creatorName#, customer_type=#customerType#, abbr1=#abbr1#, abbr2=#abbr2#, abbr3=#abbr3#, owner_id=#ownerId#, owner_user_name=#ownerUserName#, out_user=#outUser#, remark=#remark#, referee_id=#refereeId#, referee_name=#refereeName# where (user_id = #userId#)
    ]]>
    </update>

    <!-- mapped statement for IbatisCustomerBaseInfoDAO.findById -->
    <select id="MS-CUSTOMER-BASE-INFO-FIND-BY-ID" resultMap="RM-CUSTOMER-BASE-INFO">
    <![CDATA[
        select /*MS-YRD-CUSTOMER-BASE-INFO-FIND-BY-ID*/ user_id, customer_id, customer_name, contact_mobile, cert_type, cert_no, cert_exp_date, long_time, country_code, country_name, province_code, province_name, city_code, city_name, county_code, county_name, address, email, mobile, telphone, fix, weixin, qq, status, business_user_id, business_user_name, creator_id, creator_name, customer_type, abbr1, abbr2, abbr3, owner_id, owner_user_name, out_user, remark, referee_id, referee_name, raw_add_time, raw_update_time from customer_base_info where (user_id = #value#)
    ]]>
    </select>

    <!-- mapped statement for IbatisCustomerBaseInfoDAO.findByOwnerId -->
    <select id="MS-CUSTOMER-BASE-INFO-FIND-BY-OWNER-ID" resultMap="RM-CUSTOMER-BASE-INFO">
    <![CDATA[
        select /*MS-YRD-CUSTOMER-BASE-INFO-FIND-BY-OWNER-ID*/ user_id, customer_id, customer_name, contact_mobile, cert_type, cert_no, cert_exp_date, long_time, country_code, country_name, province_code, province_name, city_code, city_name, county_code, county_name, address, email, mobile, telphone, fix, weixin, qq, status, business_user_id, business_user_name, creator_id, creator_name, customer_type, abbr1, abbr2, abbr3, owner_id, owner_user_name, out_user, remark, referee_id, referee_name, raw_add_time, raw_update_time from customer_base_info where (owner_id = #value#)
    ]]>
    </select>

    <!-- mapped statement for IbatisCustomerBaseInfoDAO.deleteById -->
    <delete id="MS-CUSTOMER-BASE-INFO-DELETE-BY-ID">
    <![CDATA[
        delete /*MS-YRD-CUSTOMER-BASE-INFO-DELETE-BY-ID*/ from customer_base_info where (user_id = #value#)
    ]]>
    </delete>

    <!-- mapped statement for IbatisCustomerBaseInfoDAO.findByCondition -->
    <select id="MS-CUSTOMER-BASE-INFO-FIND-BY-CONDITION" resultMap="RM-CUSTOMER-BASE-INFO">
        SELECT /*MS-YRD-CUSTOMER-BASE-INFO-FIND-BY-CONDITION*/ * from customer_base_info cu
	            <isNotEmpty property="customerBaseInfo.certType">
                   <![CDATA[   JOIN (SELECT COUNT(*) rnum,cert.user_id FROM customer_cert_info cert
                    WHERE cert.cert_type = #customerBaseInfo.certType#  GROUP BY cert.user_id) rl
                    ON rl.user_id = cu.user_id AND rl.rnum > 0
                    ]]>
                </isNotEmpty>

                <isNotEmpty property="customerBaseInfo.certNo">
                     <![CDATA[   JOIN (SELECT COUNT(*) rnum,cert.user_id FROM customer_cert_info cert
                     WHERE cert.cert_no = #customerBaseInfo.certNo#  GROUP BY cert.user_id) rl2
                    ON rl2.user_id = cu.user_id AND rl2.rnum > 0
                    ]]>
                 </isNotEmpty>
	         where 1=1
	        <dynamic>
	        
	            <isNotEmpty property="companys"   prepend=" and ">
	                cu.user_id in ($companys$)
	            </isNotEmpty>

	            <isNotEmpty property="removeCompanys"   prepend=" and ">
	                cu.user_id not in ($removeCompanys$)
	            </isNotEmpty>

	            <isNotEmpty property="customerBaseInfo.customerName"  prepend=" and ">
	              cu.customer_name like concat('%',#customerBaseInfo.customerName#,'%')
	            </isNotEmpty>

	             <isNotEmpty property="customerBaseInfo.customerType"  prepend=" and ">
	                <isNotEqual property="customerBaseInfo.customerType" compareValue="companyCustomer">
	                  cu.customer_type = #customerBaseInfo.customerType#
					</isNotEqual>
					 <isEqual property="customerBaseInfo.customerType" compareValue="companyCustomer">
					   cu.customer_type in ( 'COMPANY_CUSTOMER','INDIVIDUAL_CUSTOMER')
					</isEqual>
	            </isNotEmpty>
	            
	            <isNotEmpty property="customerBaseInfo.mobile"  prepend=" and ">
	                cu.mobile = #customerBaseInfo.mobile#
	            </isNotEmpty>



	        </dynamic>
	         <isNotEmpty property="sortCol" prepend=" order by ">
	             $sortCol$
	                <isNotEmpty property="sortOrder">
              	 		$sortOrder$
             		</isNotEmpty>
	         </isNotEmpty>
            LIMIT #limitStart#,#pageSize#;
    </select>

    <!-- mapped statement for IbatisCustomerBaseInfoDAO.findByConditionCount -->
    <select id="MS-CUSTOMER-BASE-INFO-FIND-BY-CONDITION-COUNT" resultClass="long">
        SELECT /*MS-YRD-CUSTOMER-BASE-INFO-FIND-BY-CONDITION-COUNT*/  count(*)  FROM customer_base_info cu
	               <isNotEmpty property="customerBaseInfo.certType">
                     <![CDATA[  JOIN (SELECT COUNT(*) rnum,cert.user_id FROM customer_cert_info cert
                    WHERE cert.cert_type = #customerBaseInfo.certType#  GROUP BY cert.user_id) rl
                    ON rl.user_id = cu.user_id AND rl.rnum > 0   ]]>
                </isNotEmpty>

                <isNotEmpty property="customerBaseInfo.certNo">
                     <![CDATA[ JOIN (SELECT COUNT(*) rnum,cert.user_id FROM customer_cert_info cert
                     WHERE cert.cert_no = #customerBaseInfo.certNo#  GROUP BY cert.user_id) rl2
                    ON rl2.user_id = cu.user_id AND rl2.rnum > 0   ]]>
                 </isNotEmpty>

	           where 1=1
	         <dynamic>
	         
	       	    <isNotEmpty property="companys"   prepend=" and ">
	                cu.user_id in ($companys$)
	            </isNotEmpty>

	            <isNotEmpty property="removeCompanys"   prepend=" and ">
	                cu.user_id not in ($removeCompanys$)
	            </isNotEmpty>


	           <isNotEmpty property="customerBaseInfo.customerName"  prepend=" and ">
	              cu.customer_name like concat('%',#customerBaseInfo.customerName#,'%')
	            </isNotEmpty>
	            
				<isNotEmpty property="customerBaseInfo.customerType"   prepend=" and ">
	                 <isNotEqual property="customerBaseInfo.customerType" compareValue="companyCustomer">
	                  cu.customer_type = #customerBaseInfo.customerType#
					</isNotEqual>
					 <isEqual property="customerBaseInfo.customerType" compareValue="companyCustomer">
					   cu.customer_type in ( 'COMPANY_CUSTOMER','INDIVIDUAL_CUSTOMER')
					</isEqual>
	            </isNotEmpty>

	            <isNotEmpty property="customerBaseInfo.mobile"  prepend=" and ">
	                cu.mobile = #customerBaseInfo.mobile#
	            </isNotEmpty>
	        </dynamic>
    </select>

    <!-- mapped statement for IbatisCustomerBaseInfoDAO.findByCustomerId -->
    <select id="MS-CUSTOMER-BASE-INFO-FIND-BY-CUSTOMER-ID" resultMap="RM-CUSTOMER-BASE-INFO">
        SELECT /*MS-YRD-CUSTOMER-BASE-INFO-FIND-BY-CUSTOMER-ID*/  user_id ,customer_id ,customer_name ,contact_mobile ,cert_type ,cert_no ,cert_exp_date ,long_time ,country_code ,country_name ,province_code ,province_name ,city_code ,city_name ,county_code ,county_name ,address ,email ,mobile ,telphone ,fix ,weixin ,qq ,status ,business_user_id ,business_user_name ,creator_id ,creator_name ,customer_type ,abbr1 ,abbr2 ,abbr3 ,owner_id ,owner_user_name ,out_user ,remark ,referee_id ,referee_name ,raw_add_time ,raw_update_time  FROM customer_base_info   WHERE customer_id = #customerUserId#
    </select>

    <!-- mapped statement for IbatisCustomerBaseInfoDAO.findAgencyCompany -->
    <select id="MS-CUSTOMER-BASE-INFO-FIND-AGENCY-COMPANY" resultMap="RM-CUSTOMER-BASE-INFO">
        SELECT /*MS-YRD-CUSTOMER-BASE-INFO-FIND-AGENCY-COMPANY*/  user_id ,customer_id ,customer_name ,contact_mobile ,cert_type ,cert_no ,cert_exp_date ,long_time ,country_code ,country_name ,province_code ,province_name ,city_code ,city_name ,county_code ,county_name ,address ,email ,mobile ,telphone ,fix ,weixin ,qq ,status ,business_user_id ,business_user_name ,creator_id ,creator_name ,customer_type ,abbr1 ,abbr2 ,abbr3 ,owner_id ,owner_user_name ,out_user ,remark ,referee_id ,referee_name ,raw_add_time ,raw_update_time  FROM customer_base_info   WHERE customer_type = #customerType#
    </select>

</sqlMap>

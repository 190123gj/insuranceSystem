<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<!-- ==========================================================  -->
<!-- Configuration for ibatis sqlmap mapping.                    -->
<!-- ==========================================================  -->

<!-- ============================================================================= -->
<!-- This file is generated by <tt>specialmer-dalgen</tt>, a DAL (Data Access Layer)  -->
<!-- code generation utility specially developed for <tt>rent</tt> project.     -->
<!--                                                                               -->
<!-- PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may be     -->
<!-- OVERWRITTEN by someone else. To modify the file, you should go to directory   -->
<!-- <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and find the corresponding   -->
<!-- configuration files. Modify those files according to your needs, then run     -->
<!-- <tt>specialmer-dalgen</tt> to generate this file.                                -->
<!--                                                                               -->
<!-- @author peigen                                                             -->
<!-- ============================================================================= -->

<sqlMap namespace="specialmer">
    <!-- ============================================= -->
    <!-- RESULT MAPS                                   -->
    <!-- ============================================= -->

    <!-- result maps for database table project_setup_customer -->
    <resultMap id="RM-PROJECT-SETUP-CUSTOMER" class="com.born.insurance.dal.dataobject.ProjectSetupCustomerDO">
        <result property="id" column="id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="projectSetupId" column="project_setup_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="customerId" column="customer_id" javaType="long" jdbcType="BIGINT" nullValue="0"/>
        <result property="customerName" column="customer_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="certNo" column="cert_no" javaType="java.lang.String" jdbcType="VARCHAR"/>
        <result property="certType" column="cert_type" javaType="java.lang.String" jdbcType="VARCHAR"/>
    </resultMap>


    <!-- ============================================= -->
    <!-- mapped statements for IbatisProjectSetupCustomerDAO -->
    <!-- ============================================= -->
    <!-- mapped statement for IbatisProjectSetupCustomerDAO.insert -->
    <insert id="MS-PROJECT-SETUP-CUSTOMER-INSERT">
        INSERT /*MS-YRD-PROJECT-SETUP-CUSTOMER-INSERT*/ INTO project_setup_customer(id,project_setup_id,customer_id,customer_name,cert_no,cert_type) VALUES (#id#,#projectSetupId#,#customerId#,#customerName#,#certNo#,#certType#)
		        <selectKey  resultClass ="long"  keyProperty ="id" >   
		          		 SELECT LAST_INSERT_ID() AS ID 
		      	</selectKey>
    </insert>

    <!-- mapped statement for IbatisProjectSetupCustomerDAO.update -->
    <update id="MS-PROJECT-SETUP-CUSTOMER-UPDATE">
    <![CDATA[
        update /*MS-YRD-PROJECT-SETUP-CUSTOMER-UPDATE*/ project_setup_customer set project_setup_id=#projectSetupId#, customer_id=#customerId#, customer_name=#customerName#, cert_no=#certNo#, cert_type=#certType# where (id = #id#)
    ]]>
    </update>

    <!-- mapped statement for IbatisProjectSetupCustomerDAO.findById -->
    <select id="MS-PROJECT-SETUP-CUSTOMER-FIND-BY-ID" resultMap="RM-PROJECT-SETUP-CUSTOMER">
    <![CDATA[
        select /*MS-YRD-PROJECT-SETUP-CUSTOMER-FIND-BY-ID*/ id, project_setup_id, customer_id, customer_name, cert_no, cert_type from project_setup_customer where (id = #value#)
    ]]>
    </select>

    <!-- mapped statement for IbatisProjectSetupCustomerDAO.deleteById -->
    <delete id="MS-PROJECT-SETUP-CUSTOMER-DELETE-BY-ID">
    <![CDATA[
        delete /*MS-YRD-PROJECT-SETUP-CUSTOMER-DELETE-BY-ID*/ from project_setup_customer where (id = #value#)
    ]]>
    </delete>

    <!-- mapped statement for IbatisProjectSetupCustomerDAO.findByCondition -->
    <select id="MS-PROJECT-SETUP-CUSTOMER-FIND-BY-CONDITION" resultMap="RM-PROJECT-SETUP-CUSTOMER">
        SELECT /*MS-YRD-PROJECT-SETUP-CUSTOMER-FIND-BY-CONDITION*/  id ,project_setup_id ,customer_id ,customer_name ,cert_no ,cert_type  FROM project_setup_customer where 1=1

	         <isNotEmpty property="sortCol" prepend=" order by ">
	             $sortCol$
	                <isNotEmpty property="sortOrder">
              	 		$sortOrder$
             		</isNotEmpty>
	         </isNotEmpty>
            LIMIT #limitStart#,#pageSize#
    </select>

    <!-- mapped statement for IbatisProjectSetupCustomerDAO.findByConditionCount -->
    <select id="MS-PROJECT-SETUP-CUSTOMER-FIND-BY-CONDITION-COUNT" resultClass="long">
        SELECT /*MS-YRD-PROJECT-SETUP-CUSTOMER-FIND-BY-CONDITION-COUNT*/  count(*) FROM project_setup_customer  where 1=1
    </select>

    <!-- mapped statement for IbatisProjectSetupCustomerDAO.findListByProjectupId -->
    <select id="MS-PROJECT-SETUP-CUSTOMER-FIND-LIST-BY-PROJECTUP-ID" resultMap="RM-PROJECT-SETUP-CUSTOMER">
    <![CDATA[
        select /*MS-YRD-PROJECT-SETUP-CUSTOMER-FIND-LIST-BY-PROJECTUP-ID*/ id, project_setup_id, customer_id, customer_name, cert_no, cert_type from project_setup_customer where (project_setup_id = #value#)
    ]]>
    </select>

    <!-- mapped statement for IbatisProjectSetupCustomerDAO.deleteByProjectSetupId -->
    <delete id="MS-PROJECT-SETUP-CUSTOMER-DELETE-BY-PROJECT-SETUP-ID">
    <![CDATA[
        delete /*MS-YRD-PROJECT-SETUP-CUSTOMER-DELETE-BY-PROJECT-SETUP-ID*/ from project_setup_customer where (project_setup_id = #value#)
    ]]>
    </delete>

</sqlMap>

<table sqlname="insurance_protocol_charge">
	<operation name="insert" paramtype="object">
		<sql>
            <![CDATA[
				INSERT INTO insurance_protocol_charge(charge_id,val,protocol_info_id,node_path,parent_id,depth,type,charge_type) VALUES (?,?,?,?,?,?,?,?)
			]]>
		</sql>

		<sqlmap>
            <![CDATA[
					INSERT INTO insurance_protocol_charge(charge_id,val,protocol_info_id,node_path,parent_id,depth,type,charge_type) VALUES (#chargeId#,#val#,#protocolInfoId#,#nodePath#,#parentId#,#depth#,#type#,#chargeType#)
				]]>
		</sqlmap>

	</operation>

	<operation name="update" paramtype="object">
		<sql>
            <![CDATA[
			UPDATE insurance_protocol_charge SET val=?,protocol_info_id=?,node_path=?,parent_id=?,depth=?,type=?,charge_type=? WHERE charge_id=?
                  
			]]>
		</sql>
	</operation>

	<operation name="findById">
		<sql>
            <![CDATA[
			 SELECT  charge_id ,val ,protocol_info_id ,node_path ,parent_id ,depth ,type ,charge_type  FROM insurance_protocol_charge WHERE charge_id=?
			]]>
		</sql>
	</operation>


	<operation name="deleteById" paramtype="string">
		<sql>
            <![CDATA[
				  DELETE FROM insurance_protocol_charge WHERE charge_id=?
			]]>
		</sql>
	</operation>

	<operation name="deleteByProtocolInfoId" paramtype="string">
		<sql>
            <![CDATA[
				  DELETE FROM insurance_protocol_charge WHERE protocol_info_id=? and (charge_type='' or charge_type is null)
			]]>
		</sql>
	</operation>

	<operation name="deleteProductByProtocolInfoId" paramtype="string">
		<sql>
            <![CDATA[
				  DELETE FROM insurance_protocol_charge WHERE protocol_info_id=? and type='PRODUCT'
			]]>
		</sql>
	</operation>



	<operation name="findByCondition" paramtype="object"
		multiplicity="many">
		<extraparams>
			<param name="sortCol" javatype="java.lang.String" />
			<param name="sortOrder" javatype="java.lang.String" />
			<param name="limitStart" javatype="long" />
			<param name="pageSize" javatype="long" />
		</extraparams>
		<sql>
            <![CDATA[
						SELECT  charge_id ,val ,protocol_info_id ,node_path ,parent_id ,depth ,type ,charge_type  FROM insurance_protocol_charge WHERE 1=1
	        ]]>
		</sql>
		<sqlmap>
            <![CDATA[
	         	SELECT  charge_id ,val ,protocol_info_id ,node_path ,parent_id ,depth ,type ,charge_type  FROM insurance_protocol_charge WHERE 1=1

	        <dynamic>
	            <isNotEmpty property="insuranceProtocolCharge.parentId"   prepend=" and ">
	                parent_id =#insuranceProtocolCharge.parentId#
	            </isNotEmpty>
	             <isNotEmpty property="insuranceProtocolCharge.depth"   prepend=" and ">
	                depth =#insuranceProtocolCharge.depth#
	            </isNotEmpty>


	            <isNotEmpty property="insuranceProtocolCharge.chargeType"   prepend=" and ">
	                charge_type =#insuranceProtocolCharge.chargeType#
	            </isNotEmpty>
                <isNotEmpty property="insuranceProtocolCharge.type"   prepend=" and ">
	                type =#insuranceProtocolCharge.type#
	            </isNotEmpty>

	            <isNotEmpty property="insuranceProtocolCharge.protocolInfoId"   prepend=" and ">
	                protocol_info_id =#insuranceProtocolCharge.protocolInfoId#
	            </isNotEmpty>
	        </dynamic>
	         <isNotEmpty property="sortCol" prepend=" order by ">
	             $sortCol$
	                <isNotEmpty property="sortOrder">
              	 		$sortOrder$
             		</isNotEmpty>
	         </isNotEmpty>
            LIMIT #limitStart#,#pageSize#
	        ]]>
		</sqlmap>
	</operation>
	<operation name="findByConditionCount" paramtype="object">

		<sql>
            <![CDATA[
	        SELECT  count(*) FROM insurance_protocol_charge WHERE  1=1
	        ]]>
		</sql>
		<sqlmap>
            <![CDATA[
	           SELECT  count(*) FROM insurance_protocol_charge  where 1=1
	            <dynamic>
	            <isNotEmpty property="insuranceProtocolCharge.parentId"   prepend=" and ">
	                parent_id =#insuranceProtocolCharge.parentId#
	            </isNotEmpty>

	            <isNotEmpty property="chargeType"  prepend=" and ">
	                charge_type =#chargeType#
	            </isNotEmpty>

	            <isNotEmpty property="type"   prepend=" and ">
	                type =#type#
	            </isNotEmpty>



	             <isNotEmpty property="insuranceProtocolCharge.depth"   prepend=" and ">
	                depth =#insuranceProtocolCharge.depth#
	            </isNotEmpty>
	            <isNotEmpty property="insuranceProtocolCharge.protocolInfoId"   prepend=" and ">
	                protocol_info_id =#insuranceProtocolCharge.protocolInfoId#
	            </isNotEmpty>

	        </dynamic>
	        ]]>
		</sqlmap>
	</operation>


	<operation name="findByConditionMax" paramtype="object">

		<sql>
            <![CDATA[
	        SELECT  max(val) FROM insurance_protocol_charge WHERE  1=1
	        ]]>
		</sql>
		<sqlmap>
            <![CDATA[
	           SELECT  max(val) FROM insurance_protocol_charge  where 1=1
	            <dynamic>
	             <isNotEmpty property="depth"   prepend=" and ">
	                depth =#depth#
	            </isNotEmpty>
	            <isNotEmpty property="protocolInfoId"   prepend=" and ">
	                protocol_info_id =#protocolInfoId#
	            </isNotEmpty>

	        </dynamic>
	        ]]>
		</sqlmap>
	</operation>

	<operation name="getInsuranceProductCharge" paramtype="object"
		multiplicity="many">
		<extraparams>
			<param name="chargeType" javatype="java.lang.String" />
			<param name="productId" javatype="java.lang.String" />
		</extraparams>
		<sql>
            <![CDATA[
						SELECT  charge_id ,val ,protocol_info_id ,node_path ,parent_id ,depth ,type ,charge_type  FROM insurance_protocol_charge WHERE 1=1
	        ]]>
		</sql>
		<sqlmap>
            <![CDATA[
	          SELECT charge_id ,val ,protocol_info_id ,node_path ,parent_id ,depth ,type ,charge_type from insurance_protocol_charge where 1=1  and depth = 2 
	        	 <dynamic>
	             <isNotEmpty property="chargeType"   prepend=" and ">
	                charge_type =#chargeType#
	            </isNotEmpty>
	            <isNotEmpty property="productId"   prepend=" and ">
	                protocol_info_id =#productId#
	            </isNotEmpty>
	             </dynamic>
	           GROUP BY val
	        ]]>
		</sqlmap>
	</operation>
	
	
	<operation name="getInsuranceProductChargeInfo" multiplicity="many">
		<extraparams>
			<param name="catalogId" javatype="java.lang.String" />
			<param name="companyUserId" javatype="java.lang.String" />
			<param name="productId" javatype="java.lang.String" />
		</extraparams>
		<sql>
            <![CDATA[
						SELECT  charge_id ,val ,protocol_info_id ,node_path ,parent_id ,depth ,type ,charge_type  FROM insurance_protocol_charge WHERE 1=1
	        ]]>
		</sql>
		<sqlmap>
            <![CDATA[
            SELECT charge_id ,val ,protocol_info_id ,node_path ,parent_id ,depth ,type ,charge_type from insurance_protocol_charge  where protocol_info_id in (
SELECT protocol_info_id from insurance_protocol_info where protocol_id in (
SELECT protocol_id from insurance_protocol where type='INSURANCE_PROTOCOL' and protocol_user_id = #companyUserId#
) 
	<isNotEmpty property="productId" prepend=" and ">
        product_id =#productId#
   </isNotEmpty>
	<isNotEmpty property="catalogId" prepend=" and ">
        catalog_id = #catalogId# and product_id is null
     </isNotEmpty>
) and parent_id = 0
	        ]]>
		</sqlmap>
	</operation>

	<operation name="getInsuranceProductChargeRate">
		<extraparams>
			<param name="age" javatype="long" />
			<param name="period" javatype="java.lang.String" />
			<param name="productId" javatype="java.lang.String" />
			<param name="chargeType" javatype="java.lang.String" />
		</extraparams>
		<sql>
            <![CDATA[
						SELECT  charge_id ,val ,protocol_info_id ,node_path ,parent_id ,depth ,type ,charge_type  FROM insurance_protocol_charge WHERE 1=1
	        ]]>
		</sql>
		<sqlmap>
            <![CDATA[
			 SELECT
	charge_id ,val ,protocol_info_id ,node_path ,parent_id ,depth ,type ,charge_type
FROM
	insurance_protocol_charge
WHERE
	parent_id = (
		SELECT
			charge_id
		FROM
			insurance_protocol_charge
		WHERE
			parent_id = (
				SELECT
					charge_id
				FROM
					insurance_protocol_charge
				WHERE
					parent_id = 0
				AND type = 'product'
				AND protocol_info_id = #productId#
				AND val = #age#
			)
		AND charge_type = #chargeType#
		AND val = #period#
	)
			]]>
		</sqlmap>
	</operation>
	
	
	<operation name="getBrokerageRate">
		<extraparams>
			<param name="type" javatype="java.lang.String" />
			<param name="productId" javatype="long" />
			<param name="companyUserId" javatype="long" />
			<param name="catalogId" javatype="java.lang.String" />
			<param name="period" javatype="java.lang.String" />
			<param name="appserialPeriod" javatype="java.lang.String" />
			<param name="now" javatype="java.util.Date" />
		</extraparams>
		<sql>
            <![CDATA[
						SELECT  charge_id ,val ,protocol_info_id ,node_path ,parent_id ,depth ,type ,charge_type  FROM insurance_protocol_charge WHERE 1=1
	        ]]>
		</sql>
		<sqlmap>
            <![CDATA[
            
            SELECT
	*
FROM
	insurance_protocol_charge
WHERE
	parent_id in (
		SELECT
			charge_id
		FROM
			insurance_protocol_charge
		WHERE
			parent_id in (
				SELECT
					charge_id
				FROM
					insurance_protocol_charge
				WHERE
					protocol_info_id in (
						SELECT
							b.protocol_info_id
						FROM
							insurance_protocol a
						RIGHT JOIN insurance_protocol_info b ON a.protocol_id = b.protocol_id
						WHERE a.type = #type# and a.protocol_user_id = #companyUserId# 
						<isEqual property="type" compareProperty="INSURANCE_PROTOCOL" prepend=" and ">
						${cdata-start} a.beginDate <= #now#  ${cdata-end} and  ${cdata-start} a.endDate >= #now#  ${cdata-end}
						</isEqual>
							<isNotEmpty property="productId"   prepend=" and ">
	                           b.product_id =#productId#
	           				 </isNotEmpty>
							<isNotEmpty property="catalogId"   prepend=" and ">
				                b.catalog_id =#"catalogId"# and b.product_id is null
				            </isNotEmpty>
					)
				AND depth = 1
				AND val = #period#
			)
		AND depth = 2
		AND val = #appserialPeriod#
	) limit 0,1
			]]>
		</sqlmap>
	</operation>
	
	
		<operation name="getUnLifeBrokerageRate">
		<extraparams>
			<param name="type" javatype="java.lang.String" />
			<param name="productId" javatype="long" />
			<param name="companyUserId" javatype="long" />
			<param name="catalogId" javatype="java.lang.String" />
			<param name="appserialPeriod" javatype="java.lang.String" />
			<param name="now" javatype="java.util.Date" />
		</extraparams>
		<sql>
            <![CDATA[
						SELECT  charge_id ,val ,protocol_info_id ,node_path ,parent_id ,depth ,type ,charge_type  FROM insurance_protocol_charge WHERE 1=1
	        ]]>
		</sql>
		<sqlmap>
            <![CDATA[
            
            SELECT
	*
FROM
	insurance_protocol_charge
WHERE
	parent_id in (
		SELECT
			charge_id
		FROM
			insurance_protocol_charge
		WHERE
			parent_id in (
				SELECT
					charge_id
				FROM
					insurance_protocol_charge
				WHERE
					protocol_info_id in (
						SELECT
							b.protocol_info_id
						FROM
							insurance_protocol a
						RIGHT JOIN insurance_protocol_info b ON a.protocol_id = b.protocol_id
						WHERE a.type = #type# and a.protocol_user_id = #companyUserId# 
						<isEqual property="type" compareProperty="INSURANCE_PROTOCOL" prepend=" and ">
						${cdata-start} a.beginDate <= #now#  ${cdata-end} and  ${cdata-start} a.endDate >= #now#  ${cdata-end}
						</isEqual>
							<isNotEmpty property="productId"   prepend=" and ">
	                           b.product_id =#productId#
	           				 </isNotEmpty>
							<isNotEmpty property="catalogId"   prepend=" and ">
				                b.catalog_id =#"catalogId"# and b.product_id is null
				            </isNotEmpty>
					)
				AND depth = 1
			)
		AND depth = 2
		AND val = #appserialPeriod#
	)  LIMIT 0,1
			]]>
		</sqlmap>
	</operation>
	
	
	<operation name="findPeriodMax">
		<extraparams>
			<param name="productId" javatype="long" />
			<param name="companyUserId" javatype="long" />
			<param name="catalogId" javatype="java.lang.String" />
			<param name="period" javatype="java.lang.String" />
			<param name="now" javatype="java.util.Date" />
		</extraparams>
		<sql>
            <![CDATA[
	        SELECT  max(val) FROM insurance_protocol_charge WHERE  1=1
	        ]]>
		</sql>
		<sqlmap>
            <![CDATA[
	          	SELECT
			MAX(val)
		FROM
			insurance_protocol_charge
		WHERE
			parent_id = (
				SELECT
					charge_id
				FROM
					insurance_protocol_charge
				WHERE
					protocol_info_id = (
						SELECT
							b.protocol_info_id
						FROM
							insurance_protocol a
						RIGHT JOIN insurance_protocol_info b ON a.protocol_id = b.protocol_id 
						where ${cdata-start} a.beginDate <= #now#  ${cdata-end} and  ${cdata-start} a.endDate >= #now#  ${cdata-end} and a.protocol_user_id = #companyUserId# 
							<isNotEmpty property="productId"   prepend=" and ">
	                           b.product_id =#productId#
	           				 </isNotEmpty>
							<isNotEmpty property="catalogId"   prepend=" and ">
				                b.catalog_id =#"catalogId"# and b.product_id is null
				            </isNotEmpty>
					)
				AND depth = 1
				AND val = #period#
			)
	        ]]>
		</sqlmap>
	</operation>

</table>
